#+TITLE: Emacs Configuration
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About
* Configurations
** Meta
** Packages

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (package-initialize)
   (setq custom-file (make-temp-file "emacs-custom"))
   #+END_SRC

   Packages can be fetched from different mirrors, [[http://melpa.milkbox.net/#/][melpa]] is the largest
   archive and is well maintained.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
   (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
   #+END_SRC

** Theme

   #+BEGIN_SRC emacs-lisp :tangle yes
   (load-theme 'ample t t)
   (enable-theme 'ample)
   #+end_src

** Mac OS X

   I run this configuration mostly on Mac OS X, so we need a couple of
   settings to make things work smoothly. In the package section
   =exec-path-from-shell= is included (only if you're running OS X), this is
   to include environment-variables from the shell. It makes using Emacs
   along with external processes a lot simpler. I also prefer using the
   =Command=-key as the =Meta=-key.

   #+BEGIN_SRC emacs-lisp
   ;; (setq mac-command-modifier 'meta)
   ;;(when (memq window-system '(mac ns))
   ;;  (setq ns-pop-up-frames nil
   ;;        mac-option-modifier nil
   ;;        mac-command-modifier 'meta
   ;;        x-select-enable-clipboard t)
     ;; (exec-path-from-shell-initialize)
   ;;  (when (fboundp 'mac-auto-operator-composition-mode)
   ;;    (mac-auto-operator-composition-mode 1)))'
   #+END_SRC

** Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar dn scrollbar.

   #+BEGIN_SRC emacs-lisp
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode 1)
     (scroll-bar-mode -1))

   ;; Turn on winner mode for C-c <> window toggling.
   ;; (winner-mode 1)
   #+end_src

** Basics and general settings
   Show line number in the left gutter and highlight current line
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp
   ; Set user full name
   (setq user-full-name "Greg Newman")
   ; Set line numbers
   (global-linum-mode 1)
   (setq linum-format "%d ")

   ; i hate tabs
   (setq-default indent-tabs-mode nil)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (require 'whitespace)
   (setq whitespace-style '(face empty tabs lines-tail trailing))
   (global-whitespace-mode t)

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; dont show startup screen
   ;(setq inhibit-startup-screen t
   ;      initial-major-mode 'fundamental-mode)

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Desktop setup.  I'm using multiple macs and using emacs --deamon
   ; so i'm concatinating the desktop name with the system name so the other
   ; macs have their own desktop file-name.
   (desktop-save-mode 1)
   (setq desktop-dirname "~/.emacs.d/desktops/")
   (setq desktop-base-file-name (concat ".desktop." (system-name)))
   (setq desktop-path (list desktop-dirname))
   (setq desktop-base-lock-name "lock")
   (setq desktop-load-locked-desktop t)

   ; use Ubuntu mono
   (set-frame-font "Office Code Pro 12")

   ; increase the line spacing
   (setq-default line-spacing 3)

   ; don't show fringe
   ;; (setq overflow-newline-into-fringe nil)
   (fringe-mode 4)

   ; Projectile
   (projectile-global-mode)

   ; Git Gutter
   (global-git-gutter-mode +1)
   #+end_src

** Frame location
   I hate that emacs opens at the top left of my screen and a tiny
   frame.  Set a default width, height and location

   #+BEGIN_SRC emacs-lisp
   (setq initial-frame-alist '((top . 30)
                               (left . 30)
                               (width . 180)
                               (height . 60)))
   #+end_src

** iBuffer-mode
   I used this in the past minimally.  Need to work with it more extensively

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("DESERVE" (filename . "/code/deserve/"))
            ("Python"
                (mode . python-mode))
            ("HTML"
                (mode . web-mode))
            ("JS"
                (mode . js-mode))
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Lisp"
                (mode . emacs-lisp-mode)
                )))))

   ;; don't show empty groups
   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Add full path to buffer title
   (setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

   #+end_src

** Reverting buffers
   Very useful if dealing with git repos and also files that can change from nValt

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

** Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; activate it for all buffers
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

** Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; save recent files
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

** IDO, ibuffer & iMenu
   Because it saves time

   #+BEGIN_SRC emacs-lisp
   ;; IDO rules
   (require 'ido)
   (ido-mode t)
   (setq ido-enable-flex-matching t)
   #+end_src

   # Symbol list using ido-imenu
   #+BEGIN_SRC emacs-lisp
   (defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))

    (global-set-key (kbd "C-x C-i") 'ido-goto-symbol)

    (add-hook 'ibuffer-hook
     (lambda ()
       (ibuffer-vc-set-filter-groups-by-vc-root)
       (unless (eq ibuffer-sorting-mode 'alphabetic)
         (ibuffer-do-sort-by-alphabetic))))

    (require 'ido-vertical-mode)
    (ido-mode 1)
    (ido-vertical-mode 1)
    #+end_src
** Python
   When starting emacs gui, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.
   #+BEGIN_SRC emacs-lisp
   ;; (exec-path-from-shell-initialize)
   #+end_src

   #+BEGIN_SRC emacs-lisp
   (pyenv-mode)
   #+end_src

   When opening a python file, look for a .python-version file and activate
   the virtualenv. [fn:7]
   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun ssbb-pyenv-hook ()
   "Automatically activates pyenv version if .python-version file exists."
   (f-traverse-upwards
   (lambda (path)
     (let ((pyenv-version-path (f-expand ".python-version" path)))
       (if (f-exists? pyenv-version-path)
           (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

   (add-hook 'find-file-hook 'ssbb-pyenv-hook)
   #+end_src

   I'm using pyenv python so add shims path to exec-path
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'exec-path "~/.pyenv/shims")
   (elpy-enable)
   #+end_src

   Use Jedi instead of buggy Rope
   #+BEGIN_SRC emacs-lisp
   (setq elpy-rpc-backend "jedi")
   (setq python-check-command (expand-file-name "/Users/greg/.pyenv/shims/flake8"))
   (setq python-check-command "flake8")

   ; cleanup whitespace on save.  This is run as a before-save-hook
   ; because it would throw flake8 errors on after-save-hook
   (add-hook 'before-save-hook 'whitespace-cleanup)
   #+end_src

   #+BEGIN_SRC emacs-lisp
   ; Debugging flymake
   ; (setq flymake-log-level 3)
   ;; (remove-hook 'elpy-modules 'elpy-module-flymake)
   #+end_src
** Org-mode
   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   ;; activate debugging
   (setq debug-on-error t
         debug-on-signal nil
         debug-on-quit nil)

   (add-to-list 'load-path "~/code/org-mode/contrib/lisp" t)
   #+end_src

   I also work on these notes in nvAlt from multiple macs so I have set txt files
   to open as org.
   #+BEGIN_SRC emacs-lisp
   ;;OPEN ALL TXT FILES IN ORGMODE
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+end_src

   Org-mode is ugly with all the leading stars.  I'm going to turn those off
   and use org-bullets for a much cleaner presentation.
   #+BEGIN_SRC emacs-lisp
   ;; hide leading stars
   (setq org-hide-leading-stars t)

   ;; use org-bullets for a cleaner view
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

   ;; Keywords
   (setq org-todo-keywords
   '((sequence
    "TODO(t)"
    "STARTED(s)"
    "WAITING(w@/!)"
    "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
   (sequence "LEARN" "TRY" "TEACH" "|" "COMPLETE(x)")
   (sequence "TOSKETCH" "SKETCHED" "|" "POSTED")))

   (setq org-todo-keyword-faces
      '(("TODO" . (:foreground "green" :weight bold))
        ("DONE" . (:foreground "cyan" :weight bold))
        ("WAITING" . (:foreground "red" :weight bold))
        ("SOMEDAY" . (:foreground "gray" :weight bold))))

   (setq org-log-done 'time)

   ;; tags - TODO: Redo these tags to mimic omnifocus
   (setq org-tag-alist '(("@work" . ?b)
                      ("@home" . ?h)
                      ("@writing" . ?w)
                      ("@errands" . ?e)
                      ("@drawing" . ?d)
                      ("@coding" . ?c)
                      ("@learning" . ?l)
                      ("@phone" . ?p)
                      ("@reading" . ?r)
                      ("@computer" . ?s)
                      ("@studio" . ?q)
                      ("thinking" . ?t)
                      ("highenergy" . ?1)))

   ;; efforts
   (add-to-list 'org-global-properties
      '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))

   ;; agenda files
   (setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    `("~/Dropbox/notesy/learning.org"
                      "~/Dropbox/notesy/classical_guitar.org"
                      "~/Dropbox/notesy/studio.org"
                      "~/Dropbox/notesy/book_notes.org"
                      "~/Dropbox/notesy/goals_bucket_list.org"
                      "~/Dropbox/notesy/thoughts.org"
                      "~/Dropbox/notesy/people.org"
                      "~/.emacs.d/greg.org"
                      "~/Dropbox/notesy/org-mode.org"
                      "~/Dropbox/notesy/routines.org"
                      "~/Dropbox/notesy/refile.org"
                      "~/Dropbox/notesy/running.org"))))

   ;; agenda
   (setq org-agenda-span 5)
   (setq org-agenda-tags-column -100) ; take advantage of the screen width
   (setq org-agenda-sticky nil)
   (setq org-agenda-inhibit-startup t)
   (setq org-agenda-use-tag-inheritance t)
   (setq org-agenda-show-log t)
   (setq org-agenda-skip-scheduled-if-done t)
   (setq org-agenda-skip-deadline-if-done t)
   (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
   (setq org-agenda-time-grid
      '((daily today require-timed)
       "----------------"
       (800 1000 1200 1400 1600 1800)))
   (setq org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")

   ;; The following lines are always needed.  Choose your own keys.
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (global-set-key "\C-cb" 'org-iswitchb)
   #+end_src

   Org-capture
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-directory "~/Dropbox/notesy")
   (setq org-default-notes-file "~/Dropbox/notesy/refile.org")

   ;; I use C-c c to start capture mode
   (global-set-key (kbd "C-c c") 'org-capture)

   ;; Capture templates
   (setq org-capture-templates
       (quote (("n" "note" entry (file "~/Dropbox/notesy/refile.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
               ("m" "Meeting" entry (file "~/Dropbox/notesy/refile.org")
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
               ("p" "Phone call" entry (file "~/Dropbox/notesy/refile.org")
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

   ;; enable line breaks
   (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
   #+end_src
** Reverting buffers
   Very useful if dealing with git repos and also files that can change from nValt

   #+BEGIN_SRC emacs-lisp
   (global-auto-revert-mode t)
   #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src
