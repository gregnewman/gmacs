#+TITLE: Emacs Configuration
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* About
  This is my personal config for Emacs.  It is constructed in literate
  programming using Org-mode for a much cleaner and readable configuration.

  If you are borrowing or using pieces of this config you can copy pieces of it
  into a scratch file and run `M-x eval-buffer` to try them out.

  If you’re viewing the Org file, you can open source code blocks (those are the
  ones in begin_src) in a separate buffer by moving your point inside them and
  typing C-c ’ (org-edit-special). This opens another buffer in emacs-lisp-mode,
  so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function,
  and then call it.
* Configurations
** Packages
   Use `use-package` so that all packages are automatically installed if I clone
   this repo for another machine.
   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
   (package-initialize)

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   (setq custom-file (make-temp-file "emacs-custom"))
   #+END_SRC

** Theme
   Currently using darcula theme until I can find one that appeals to me.
   The artist in me is very picky with themes and nothing I've tried is pleasing, yet.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package darcula-theme
     :ensure t
     :config
     (load-theme 'darcula t))
   #+end_src

** Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.

   #+BEGIN_SRC emacs-lisp
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode 1)
     (scroll-bar-mode -1))

   ;; Turn on winner mode for C-c <> window toggling.
   (winner-mode 1)
   #+end_src

** Basics and general settings
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp
   ; Set user full name
   (setq user-full-name "Greg Newman"
         user-mail-address "greg@gregnewman.org")

   ; line numbers mode using new mode in 26+
   (global-display-line-numbers-mode 1)

   ; i hate tabs
   (setq-default indent-tabs-mode nil)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (require 'whitespace)
   (setq whitespace-style '(face empty tabs lines-tail trailing))
   (global-whitespace-mode t)

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Desktop setup.  I'm using multiple macs and using emacs --deamon
   ; so i'm concatinating the desktop name with the system name so the other
   ; macs have their own desktop file-name.
   (desktop-save-mode 1)
   (setq desktop-dirname "~/.emacs.d/desktops/")
   (setq desktop-base-file-name (concat ".desktop." (system-name)))
   (setq desktop-path (list desktop-dirname))
   (setq desktop-base-lock-name "lock")
   (setq desktop-load-locked-desktop t)

   ; use Ubuntu mono
   (set-frame-font "Office Code Pro 13")

   ; don't show fringe
   (fringe-mode 4)

   ; Projectile
   (projectile-global-mode)
   (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

   ; Git Gutter
   (global-git-gutter-mode +1)

   ; Browse Dash documentation
   (require 'counsel-dash)
   (setq counsel-dash-common-docsets '("Javascript" "Python_3" "AngularJS"))

   ; Because i forget keyboard shortcuts
   (use-package guide-key
     :defer t
     :diminish guide-key-mode
     :config
     (progn
     (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
     (guide-key-mode 1)))

   ;; Move to beginning of line.  Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

   (defun my/smarter-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first.  If
   point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'my/smarter-move-beginning-of-line)

    ;; set shell to zsh
    (setq explicit-shell-file-name "/bin/zsh")

    ;; control backups
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
   #+end_src

** TODO iBuffer-mode
   Determine if this can be done with counsel instead of ibuffer.

   I used this in the past minimally.  Need to work with it more extensively

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("DESERVE" (filename . "/code/deserve/"))
            ("Python"
                (mode . python-mode))
            ("HTML"
                (mode . web-mode))
            ("JS"
                (mode . js-mode))
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Lisp"
                (mode . emacs-lisp-mode)
                )))))

   ;; don't show empty groups
   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Add full path to buffer title
   (setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))

   #+end_src

** Reverting buffers
   Very useful if dealing with git repos and also files that can change from nValt

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

** Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

** Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

** TODO Python
   When starting emacs gui, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
   (exec-path-from-shell-initialize)
   #+end_src

   Trying out the use of the Microsoft LSP that powers VS Code for python.
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package lsp-python-ms
        :demand
        :load-path "~/code/scratch/lsp-python-ms"
        :ensure nil
        :hook (python-mode . lsp)
        :config
        ;; for dev build of language server
        (setq lsp-python-ms-dir
          (expand-file-name "~/code/scratch/python-language-server/output/bin/Release/"))
        ;; for executable of language server
        (setq lsp-python-ms-executable
          "~/code/scratch/python-language-server/output/bin/Release/osx.10.14-x64/publish/Microsoft.Python.LanguageServer"))

      (use-package lsp-mode
        :ensure t
        :commands lsp
        :hook
          (python-mode . lsp)
        :init
          (setq lsp-prefer-flymake nil))

      (use-package lsp-ui
        :ensure t
        :after lsp-mode
        :hook ((lsp-mode . lsp-ui-mode))
        :config 
          (setq lsp-ui-sideline-ignore-duplicate t
                lsp-ui-sideline-enable nil
                lsp-ui-doc-enable t
                lsp-ui-doc-use-childframe t
                lsp-ui-doc-position 'top
                lsp-ui-doc-include-signature t))

      (use-package company-lsp
        :ensure t
        :init)
   #+end_src

   When opening a python file, look for a .python-version file and activate
   the virtualenv. [fn:7]
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun ssbb-pyenv-hook ()
     "Automatically activates pyenv version if .python-version file exists."
     (f-traverse-upwards
     (lambda (path)
       (let ((pyenv-version-path (f-expand ".python-version" path)))
         (if (f-exists? pyenv-version-path)
             (pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

     (add-hook 'find-file-hook 'ssbb-pyenv-hook)
   #+end_src

   ; cleanup whitespace on save.  This is run as a before-save-hook
   ; because it would throw flake8 errors on after-save-hook
   ; (add-hook 'before-save-hook 'whitespace-cleanup)

** Javascript
   The LSP client for JavaScript/TypeScript needs to be installed via npm before you can use it: npm install -g javascript-typescript-langserver.

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package js2-mode
     :mode ("\\.js\\'")
     :hook ((js2-mode typescript-mode-hook) . lsp)
     :init
     (setq-default js2-ignored-warnings '("msg.extra.trailing.comma"
                                          "msg.missing.semi"
                                          "msg.no.side.effects")))

   (use-package indium
     :defer t
     :init
     (add-hook 'js2-mode-hook (lambda ()
                             (require 'indium)
                             (indium-interaction-mode))))
   #+end_src

** JSON

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package json-mode
     :defer t)
   #+end_src

** Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package markdown-mode
     :commands (markdown-mode gfm-mode)
     :mode ("\\.md\\'"
            "\\.mkd\\'"
            "\\.markdown\\'")
     :init
     (setq mardown-command "multimarkdown"))
   #+end_src

** TODO Org-mode
   Rethink my list of org files and regroup them.

   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   ;; activate debugging
   ; (setq debug-on-error t
   ;      debug-on-signal nil
   ;      debug-on-quit nil)

   (add-to-list 'load-path "~/code/org-mode/contrib/lisp" t)
   #+end_src

   I also work on these notes in Notesy on the iphone so I have set txt files
   to open as org. 
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+end_src

   Org-mode is ugly with all the leading stars.  I'm going to turn those off
   and use org-bullets for a much cleaner presentation.
   #+BEGIN_SRC emacs-lisp
   (setq org-hide-leading-stars t)
   (require 'org-bullets)
   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

   ;; Keywords
   (setq org-todo-keywords
   '((sequence
    "TODO(t)"
    "STARTED(s)"
    "WAITING(w@/!)"
    "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")
   (sequence "LEARN" "TRY" "TEACH" "|" "COMPLETE(x)")
   (sequence "TOSKETCH" "SKETCHED" "|" "POSTED")))

   (setq org-todo-keyword-faces
      '(("TODO" . (:foreground "green" :weight bold))
        ("DONE" . (:foreground "cyan" :weight bold))
        ("WAITING" . (:foreground "red" :weight bold))
        ("SOMEDAY" . (:foreground "gray" :weight bold))))

   (setq org-log-done 'time)

   ;; tags - TODO: Redo these tags to mimic omnifocus
   (setq org-tag-alist '(("@work" . ?b)
                      ("@home" . ?h)
                      ("@writing" . ?w)
                      ("@errands" . ?e)
                      ("@drawing" . ?d)
                      ("@coding" . ?c)
                      ("@learning" . ?l)
                      ("@phone" . ?p)
                      ("@reading" . ?r)
                      ("@computer" . ?s)
                      ("@studio" . ?q)
                      ("thinking" . ?t)
                      ("highenergy" . ?1)))

   ;; efforts
   (add-to-list 'org-global-properties
      '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00 6:00 8:00"))

   ;; agenda files
   (setq org-agenda-files
      (delq nil
            (mapcar (lambda (x) (and (file-exists-p x) x))
                    `("~/Dropbox/notesy/kizen.org"
                      "~/Dropbox/notesy/learning.org"
                      "~/Dropbox/notesy/classical_guitar.org"
                      "~/Dropbox/notesy/studio.org"
                      "~/Dropbox/notesy/book_notes.org"
                      "~/Dropbox/notesy/journal.org"
                      "~/.emacs.d/gmacs.org"
                      "~/Dropbox/notesy/org-mode.org"
                      "~/Dropbox/notesy/routines.org"
                      "~/Dropbox/notesy/refile.org"
                      "~/Dropbox/notesy/running.org"))))

   ;; agenda
   (setq org-agenda-span 5)
   (setq org-agenda-tags-column -100) ; take advantage of the screen width
   (setq org-agenda-sticky nil)
   (setq org-agenda-inhibit-startup t)
   (setq org-agenda-use-tag-inheritance t)
   (setq org-agenda-show-log t)
   (setq org-agenda-skip-scheduled-if-done t)
   (setq org-agenda-skip-deadline-if-done t)
   (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
   (setq org-agenda-time-grid
      '((daily today require-timed)
       "----------------"
       (800 1000 1200 1400 1600 1800)))
   (setq org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")

   ;; The following lines are always needed.  Choose your own keys.
   (global-set-key "\C-cl" 'org-store-link)
   (global-set-key "\C-ca" 'org-agenda)
   (global-set-key "\C-cb" 'org-iswitchb)
   #+end_src

   Org-capture
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-directory "~/Dropbox/notesy")
   (setq org-default-notes-file "~/Dropbox/notesy/refile.org")

   ;; I use C-c c to start capture mode
   (global-set-key (kbd "C-c c") 'org-capture)

   ;; Capture templates
   (setq org-capture-templates
       (quote (("n" "note" entry (file "~/Dropbox/notesy/refile.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
               ("m" "Meeting" entry (file "~/Dropbox/notesy/refile.org")
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
               ("p" "Phone call" entry (file "~/Dropbox/notesy/refile.org")
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

   ;; enable line breaks
   (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
   #+end_src
** Ivy, Swiper and Counsel
   I went from IDO to Helm and now going for a more minimalist
   lightweight solution in Ivy.

   #+BEGIN_SRC emacs-lisp
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq ivy-count-format "(%d/%d) ")
   ;; Ivy-based interface to standard commands
   (global-set-key (kbd "C-s") 'swiper)
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   ;; Ivy-based interface to shell and system tools
   (global-set-key (kbd "C-c c") 'counsel-compile)
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   (use-package ivy-rich
     :ensure t
     :after (ivy)
     :init
     (setq ivy-rich-path-style 'abbrev
        ivy-virtual-abbreviate 'full)
     :config (ivy-rich-mode 1))
   #+end_src
** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src
