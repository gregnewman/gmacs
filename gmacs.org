#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs for emacs for daily use with Python and Orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git python javascript react vue css html
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate programming using Org-mode for a documented configuration.

  If you’re viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and
  typing C-c ’ (org-edit-special). This opens another buffer in emacs-lisp-mode, so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function, and then call it.

* Packages
   I use `use-package` so that all packages are automatically installed if cloning this repo for another machine. [[https://github.com/quelpa/quelpa][Quelpa]] grabs and builds packages from source (e.g. Github). Along with the quelpa package, quelpa-use-package adds a handler to use-package.

   #+BEGIN_SRC emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
             (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
            (bootstrap-version 5))
        (unless (file-exists-p bootstrap-file)
          (with-current-buffer
              (url-retrieve-synchronously
               "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
               'silent 'inhibit-cookies)
            (goto-char (point-max))
            (eval-print-last-sexp)))
        (load bootstrap-file nil 'nomessage))

      (straight-use-package 'use-package)
      (setq straight-use-package-by-default t)

      ;; Disable package.el in favor of straight.el
     (setq package-enable-at-startup nil)

     ;; Install use-package
     (straight-use-package 'use-package)

     (package-initialize)

      ;; TODO: determine if I need or still use quelpa with straight.
      (use-package quelpa)
      (use-package quelpa-use-package :ensure t)
      (use-package use-package-ensure-system-package :ensure t)

      ;; Handle the `use-package-always-ensure' setting
      (quelpa-use-package-activate-advice)
   #+END_SRC

* Theme
   My current configuration uses doom-theme, specifically doom-gruvbox and some default settings.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config)
       (load-theme 'doom-dracula t))
   #+end_src

* Windows Configuration
  Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.
  Also set `C-z` and `C-x C-z` to nil.  `C-z` minimizes/hides emacs and it's enfuriating when I accidently hit that key combo.

  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :init
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (tooltip-mode -1)
      :config
      (setq inhibit-splash-screen t)
      :bind (("C-z" . nil)
             ("C-x C-z" . nil)))
  #+end_src

* Font handling
  For a more asthetically pleasing experience I'm changing how I use fonts in emacs.  For buffers related to code I want Fira Code and for writing in org-mode buffers I want Avenir.  The following functions allow me to change based on the detected modes.

  #+BEGIN_SRC emacs-lisp
    ;; Use variable width font faces in buffer
    (defun my-buffer-face-mode-variable ()
      "Set font to a variable width (proportional) fonts in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Avenir" :height 140 :width semi-condensed))
      (buffer-face-mode))
    ;; Use monospaced font faces in buffer
    (defun my-buffer-face-mode-fixed ()
      "Sets a fixed width (monospace) font in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Fira Code" :height 120))
      (buffer-face-mode))
    ;; Set default font faces for Info and ERC modes
    (add-hook 'org-mode-hook 'my-buffer-face-mode-variable)
    (add-hook 'python-mode-hook  'my-buffer-face-mode-fixed)
    (add-hook 'rjsx-mode 'my-buffer-face-mode-fixed)
    ;; (add-hook 'web-mode 'my-buffer-face-mode-fixed)
  #+end_src

* One liners preferences

  Small settings and packages that really don't have a place anywhere else in this document that warrants it's own section heading for each one.
  These are important in how I like my emacs to perform.

  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-frame-font "Fira Code Medium 13")
    (setq user-full-name "Greg Newman"
          user-mail-address "greg@gregnewman.org")
    (setq-default indent-tabs-mode nil)
    (setq ring-bell-function (lambda ()))
    (setq confirm-kill-emacs 'yes-or-no-p)
    (setq require-final-newline t)
    (setq-default line-spacing 0.35)
    (setq explicit-shell-file-name "/bin/zsh")
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t)
    (setq kept-new-versions 6)
    (setq kept-old-versions 2)
    (setq version-control t)
    (global-display-line-numbers-mode)
    (setq-default display-line-numbers-width 3)
    (setq-default display-fill-column-indicator-column 80)
    ;; always show paren highlights
    (show-paren-mode 1)
    ; highlight current line
    (global-hl-line-mode 1)
    ;; javascript indents.  This can probably be removed once I settle on a "good" js config
    (setq js-indent-level 2)
    ; Desktop setup.
    (desktop-save-mode 1)
    (setq desktop-dirname "~/.emacs.d/desktops/")
    (setq desktop-base-file-name (concat ".desktop." (system-name)))
    (setq desktop-path (list desktop-dirname))
    (setq desktop-base-lock-name "lock")
    (setq desktop-load-locked-desktop t)
    ; Very useful if dealing with git repos and also files that can change from Dropbox
    (global-auto-revert-mode t)
    ;; Configure where TAGS are stored
    (setq tags-table-list (list "~/.emacs.d/TAGS"))
   #+end_src

* Icons, Whitespace, Git Gutter, Dash and Recent files
   #+BEGIN_SRC emacs-lisp
     ;; icons
     (use-package all-the-icons)

     (use-package whitespace
       :init
       (dolist (hook '(prog-mode-hook text-mode-hook))
         (add-hook hook #'whitespace-mode))
         (add-hook 'before-save-hook #'whitespace-cleanup)
       :config
       (setq whitespace-style '(face tabs empty trailing)))

     ;; ;; Git Gutter
     (use-package git-gutter
       :ensure t
       :diminish git-gutter-mode
       :config (global-git-gutter-mode)
       :init
       (progn
         (setq git-gutter:separator-sign " "
               git-gutter:lighter " GG"))
       :config
       (progn
         (set-face-background 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-background 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-background 'git-gutter:added "#546E00")
         (set-face-foreground 'git-gutter:added "#546E00"))
       :bind (("C-x p" . git-gutter:previous-hunk)
              ("C-x n" . git-gutter:next-hunk)
              ("C-x v =" . git-gutter:popup-hunk)
              ("C-x v r" . git-gutter:revert-hunk)))

     ;; Browse Dash documentation
     (use-package counsel-dash
       :config
       (setq counsel-dash-common-docsets '("Javascript" "Python_3")))

     ;; Recent files
     (setq recentf-save-file (concat user-emacs-directory "recentf")
           recentf-max-saved-items 200
           recentf-max-menu-items 15)
     (recentf-mode t)
   #+end_src

* Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

* Custom function to move to beginning of line
     Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

     #+BEGIN_SRC emacs-lisp
     (defun my/smarter-move-beginning-of-line (arg)
     "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
      (interactive "^p")
      (setq arg (or arg 1))

      ;; Move lines first
      (when (/= arg 1)
        (let ((line-move-visual nil))
          (forward-line (1- arg))))

      (let ((orig-point (point)))
        (back-to-indentation)
        (when (= orig-point (point))
          (move-beginning-of-line 1))))

      ;; remap C-a to `smarter-move-beginning-of-line'
      (global-set-key [remap move-beginning-of-line]
                      'my/smarter-move-beginning-of-line)
   #+end_src
* Which-key
  I forget bindings for modes I don't use regularly. Which-key provides nice reminders.

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
      which-key-side-window-max-width 0.33
      which-key-idle-delay 0.5)
    :diminish which-key-mode)

  (provide 'init-which-key)
  #+end_src
* Org-mode
  [[https://gettingthingsdone.com/][Getting Things Done]] (GTD), is a grouping of productivity processes following five basic principles.

  * Capture - Everything in your mind needs to be captured because your mind is "a horrible office".  This is typically the inbox.org file in my setup but is also done in analog notebooks, email and voice memos.
  * Clarify - Every task that doesn't take two minutes to do should be broken down into actionable tasks that simplify the larger scope of the project.
  * Organize - All projects and next actions are organized into areas, assigned due dates if needed, prioritized and effort estimates added to them.  If the tasks/projects are not something to do right now they are still organized for later consumption.  Anything that needs to be on the calendar should be added but keep the calendar sacred.  Calendars should only be for appointments or hard-carved blocks of time.
  * Reviews - Reviews should be handled on a regular basis.  I do a daily review of what should be the priorities for the day but I also do weekly and monthly reviews to keep my systems from getting stale and/or stuck.
  * Engage - Choose the next action and get to work.

  As a software craftsman I spend my days in Emacs. [[https://orgmode.org/][Orgmode]] is a perfect solution for keeping me honest with my system(s) and having it ready at a keystroke.  My files are plain text files with the .org extenstion and synced between my laptops and mobile devices using Dropbox.

  My org file structure is as follows:
  * gtd.org - Where my personal areas live. Personal, Finance, House, Cars, Wife, Dog, etc.
  * books.org - A record of the books I read and related notes.
  * classical_guitar.org - This file tracks my course work for the classical guitar school and my studies.
  * computer.org - Notes related to my Linux setup and the programming languages I use.
  * daybook.org - A living notebook that I append to during the day with notes about projects or KI's
  * learning.org - any courses I take, typically CS related live here.
  * reviews.org - I use templates to guide the daily, weekly and monthly reviews.  The results of those are in this file.
  * studio.org - All tasks and notes regarding my art studio, projects and client commissions.
  * Each software related client gets a file of their own where I track time, tasks and notes.  Each file is named after the client.

    Notes:  I've moved my org directory into iCloud so I can use iA Writer on my iOS devices for editing files.  I'll try this experiment for a while and see if it's more enjoyable.

** COMMENT Installation via Git repo
   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   (setq org-modules '(org-info
                      org-panel
                      org-protocol
                      org-toc))
   (eval-after-load 'org
     '(org-load-modules-maybe t))
   #+end_src
** Org Setup
   #+BEGIN_SRC emacs-lisp
     ;; respects splits
     (setq org-agenda-window-setup 'current-window)
     ;; agenda files
     (setq org-agenda-files (list "~/Dropbox/Org/"))
     ;; Start the weekly agenda on Monday
     (setq org-agenda-start-on-weekday 1)
     ;; Display tags farther right
     (setq org-agenda-tags-column -102)
     (setq org-agenda-span 5)
     (setq org-tags-column 150)
     (setq org-agenda-sticky nil)
     (setq org-agenda-inhibit-startup t)
     (setq org-agenda-use-tag-inheritance t)
     (setq org-agenda-show-log t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
     (setq org-columns-default-format "%14SCHEDULED %Effort{:} %CLOCKSUM_T{:} %1PRIORITY %TODO %50ITEM %TAGS")
     ;; The following lines are always needed.  Choose your own keys.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     ;; enable line breaks
     (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

     ;; Don't allow parent to be marked done unless children are done
     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-fontify-done-headline t)
     (setq org-startup-folded t)
     (setq org-src-fontify-natively nil)

     ;; Refiling
     (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
     (setq org-refile-allow-creating-parent-nodes 'confirm)

     ;; Visual Line Mode
     (add-hook 'org-mode-hook 'visual-line-mode)

     ;; Line numbers
     (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))

     (defun gn/orgmode-ignore-whitespace-mode ()
        (interactive)
        "turns off whitespace mode in org buffers"
        (whitespace-mode -1))
       ;; Set default font faces for Info and ERC modes
     (add-hook 'org-mode-hook #'gn/orgmode-ignore-whitespace-mode)
   #+end_src

** GTD
   These are functions for use in Agenda commands for stuck projects.
   Attribution: [[http://doc.norang.ca/org-mode.html#GTD][Bernt Hansen - Norang]]
   #+BEGIN_SRC emacs-lisp
(defun gn/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

(defun gn/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun gn/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun gn/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (gn/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun gn/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun gn/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun gn/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun gn/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar gn/hide-scheduled-and-waiting-next-tasks t)

(defun gn/toggle-next-task-display ()
  (interactive)
  (setq gn/hide-scheduled-and-waiting-next-tasks (not gn/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if gn/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun gn/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (gn/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun gn/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (gn/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (gn/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun gn/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (gn/list-sublevels-for-projects-indented)
  (if (save-excursion (gn/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((gn/is-project-p)
            nil)
           ((and (gn/is-project-subtree-p) (not (gn/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun gn/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((gn/is-task-p)
        nil)
       (t
        next-headline)))))

(defun gn/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((and gn/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((gn/is-project-p)
        next-headline)
       ((and (gn/is-task-p) (not (gn/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun gn/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((gn/is-project-p)
        next-headline)
       ((and (not limit-to-project)
             (gn/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (gn/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun gn/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
      ((gn/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((gn/is-project-p)
        next-headline)
       ((and (gn/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (gn/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun gn/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (gn/is-subproject-p)
        nil
      next-headline)))
   #+end_src

** Estimates and clocking
   I need to track time for clients and projects.  This nudges me when I clock in
   to make sure I have an estimate set.


   #+BEGIN_SRC emacs-lisp
   (defun gn/org-mode-ask-effort ()
     "Ask for an effort estimate when clocking in."
     (unless (org-entry-get (point) "Effort")
       (let ((effort
              (completing-read
               "Effort: "
               (org-entry-get-multivalued-property (point) "Effort"))))
       (unless (equal effort "")
         (org-set-property "Effort" effort)))))

   (add-hook 'org-clock-in-prepare-hook
     'gn/org-mode-ask-effort)

   ;; Remove empty LOGBOOK drawers on clock out
   (defun gn/remove-empty-drawer-on-clock-out ()
     (interactive)
     (save-excursion
     (beginning-of-line 0)
     (org-remove-empty-drawer-at "LOGBOOK" (point))))

   (add-hook 'org-clock-out-hook 'gn/remove-empty-drawer-on-clock-out 'append)

   ;; efforts
   (add-to-list 'org-global-properties
        '("Effort_ALL". "0:30 1:00 2:00 3:00 4:00 6:00 7:00 8:00 12:00 16:00 40:00"))
   #+end_src

** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '(
        (python . t)
        (emacs-lisp . t)
        (org . t)
        (sql . t)
        (ditaa . t)
     ))
     ;; Syntax highlight in #+BEGIN_SRC blocks
     (setq org-src-fontify-natively t)
     ;; Don't prompt before running code in org
     (setq org-confirm-babel-evaluate nil)
   #+end_src
** Keywords and Tags
*** Todo Keywords
    Setting up my todo keywords which are global and their relative colors.
   #+BEGIN_SRC emacs-lisp
    ;; Keywords
    (setq org-todo-keywords
      (quote ((sequence "NEXT(n)" "TODO(t)" "PROJ(p)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

    (setq org-todo-keyword-faces
      (quote (("TODO" :foreground "lime green" :weight bold)
              ("NEXT" :foreground "cyan" :weight bold)
              ("DONE" :foreground "dim gray" :weight bold)
              ("WAITING" :foreground "tomato" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "dim gray" :weight bold))))
   #+end_src

*** Fast todo selection
     Fast todo selection allows changing from any task todo state to any other state directly by selecting the appropriate key from the fast todo selection key menu. This is a great feature!
   #+BEGIN_SRC emacs-lisp
     (setq org-use-fast-todo-selection t)
   #+end_src

     Allows changing todo states with S-left and S-right skipping all of the normal processing when entering or leaving a todo state. This cycles through the todo states but skips setting timestamps and entering notes which is very convenient when all you want to do is fix up the status of an entry.
   #+BEGIN_SRC emacs-lisp
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)

     (setq org-log-done 'time)
     (setq org-log-redeadline 'time)
     (setq org-log-reschedule 'time)
   #+end_src
*** Todo state triggers
    I have a few triggers that automatically assign tags to tasks
    based on state changes. If a task moves to CANCELLED state then it
    gets a CANCELLED tag. Moving a CANCELLED task back to TODO removes
    the CANCELLED tag. These are used for filtering tasks in agenda
    views which I'll talk about later.

    The triggers break down to the following rules:

    Moving a task to CANCELLED adds a CANCELLED tag
    Moving a task to WAITING adds a WAITING tag
    Moving a task to HOLD adds WAITING and HOLD tags
    Moving a task to a done state removes WAITING and HOLD tags
    Moving a task to TODO removes WAITING, CANCELLED, and HOLD tags
    Moving a task to NEXT removes WAITING, CANCELLED, and HOLD tags
    Moving a task to DONE removes WAITING, CANCELLED, and HOLD tags
    The tags are used to filter tasks in the agenda views conveniently.

    Attribution: [[http://doc.norang.ca/org-mode.html][http://doc.norang.ca/org-mode.html]]

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
   #+end_src
*** Tags
    The tags I'm currently using have gone through a few iterations and probably will a few more times until I settle on a structure I like.  I am not religious about using tags but some of them allow me better filtering for clock reports, which I use for billing and for narrowing agendas.

   #+BEGIN_SRC emacs-lisp
     (setq org-tag-alist '((:startgroup)
                           ("client" . ?c)
                           ("studio" . ?s)
                           ("finance" . ?f)
                           ("agenda" . ?a)
                           ("errands" . ?e)
                           ("learning" . ?l)
                           ("KI" . ?k) ;; knowledge investment used in capture templates
                           (:endgroup)
                           ("PROJECT" . ?p)
                           ("phone" . ?t)
                           ("meeting" . ?M)
                           ("email" . ?m)
                           ("read" . ?r)
                           ("NOTE" . ?n)
                           ("FLAGGED" . ?F)
                           ("WAITING" . ?W)
                           ("WRITING" . ?w)))
   #+end_src

** Sticky agendas
   Allow you to have more than one agenda view created simultaneously.
   You can quickly switch to the view without incurring an agenda
   rebuild by invoking the agenda custom command key that normally
   generates the agenda. If it already exists it will display the
   existing view. g forces regeneration of the agenda view.

   #+BEGIN_SRC emacs-lisp
   ;; Use sticky agenda's so they persist
   (setq org-agenda-sticky t)
   #+end_src
** Org-capture
   Capture helps me stay on track during my day.  As distraction and thoughts try to steal my time, I can quickly add a note or task to
   be refiled and dealt with later.  The same goes for phone calls and meetings.
*** Directories and files
   #+BEGIN_SRC emacs-lisp
   (setq org-directory "~/Dropbox/Org")
   (setq org-default-notes-file "~/Dropbox/Org/inbox.org")
   #+end_src
*** Capture mode keybinding
   I use C-c c to start capture mode
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c c") 'org-capture)
   #+end_src
*** Capture templates
    Capture template are critical for keeping focused on the current work and not getting sent down the proverbial rabbit hole.  It's also handy for knowledge investements while working.  For instance, a method in a python library I need to understand more deeply, I can trigger the capture template for Knowledge Investments with `C=c c k`, add some context and with `C=c C=c` close and save the capture without leaving my position in the file.  The link to where I found the method is captured in the template and I can visit that later in the day when I have time to dive deep.

    For my reference the syntax is as follows
    #+BEGIN_EXAMPLE
    ("t" "Todo" entry (file "~/Dropbox/Org/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-keep t)
    #+end_example

    `t` is the trigger key for Todo.
    Todo entry is layman's term for the capture followed by what file to store it in.
    The instruction regex starts with the tag or keyword then [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][template expansions]].
       - %? Position the cursor where I was
       - %u, %U Inactive timestamp
       - %a annotation, normally the link created with org-store-link
       - :clock-keep keeps the clock running if I'm clocking a task

   #+BEGIN_SRC emacs-lisp
     ;; Capture templates
     (setq org-indent-indentation-per-level 2)
     (setq org-capture-templates
         (quote (("t" "Todo" entry (file "~/Dropbox/Org/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-keep t)
                 ("k" "Knowledge Investment" entry (file "~/Dropbox/Org/inbox.org")
                  "* %? :KI:\n%U\n%a\n" :clock-keep t)
                 ("n" "Note" entry (file "~/Dropbox/Org/inbox.org")
                  "* %? :NOTE:\n%U\n%a\n" :clock-keep t)
                 ("d" "Daybook" entry (file+olp+datetree "~/Dropbox/Org/daybook.org")
                  "* %?" :clock-keep t)
                 ("p" "Phone call" entry (file "~/Dropbox/Org/inbox.org")
                  "* PHONE %? :PHONE:\n%U" :clock-keep t))))
   #+end_src

** Org bullets and misc settings
   Using org buillets and hiding leading stars.  I'm also fontifying headings, quotes and done headlines.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :commands org-bullets-mode
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))

     (setq org-hide-leading-stars t)
     (setq org-indent-mode t)
     (setq org-fontify-whole-heading-line t)
     (setq org-fontify-quote-and-verse-blocks t)
     (setq org-fontify-done-headline t)
   #+end_src
** Agenda commands
    Pulled some ideas from https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
    Some of these have been yanked from [[http://bnbeckwith.com/bnb-emacs/][bnb-emacs]]

   #+BEGIN_SRC emacs-lisp
     (defun gn/org-skip-subtree-if-priority (priority)
     "Skip an agenda subtree if it has a priority of PRIORITY.

     PRIORITY may be one of the characters ?A, ?B, or ?C."
       (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
        (if (= pri-value pri-current)
          subtree-end
        nil)))

     (defun gn/org-agenda-with-tip (arg)
       (org-agenda-list arg)
       (let ((inhibit-read-only t)
          (pos (point)))
       (goto-char (point-max))
       (goto-char pos)))

     ;; Reset everything to nil
     (setq org-agenda-custom-commands nil)

     (add-to-list 'org-agenda-custom-commands
               '("b" "Agenda" gn/org-agenda-with-tip))

     (add-to-list 'org-agenda-custom-commands
          '("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t))))

     (add-to-list 'org-agenda-custom-commands
        '("k" "Knowledge Investments" tags "KI"
               ((org-agenda-overriding-header "Knowledge Investments")
                (org-tags-match-list-sublevels t))))

     ;; Taken from doc.norang.ca/org-mode.html
     (add-to-list 'org-agenda-custom-commands
          '(" " "Agenda"
                 ((agenda "" nil)
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if gn/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'gn/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags "INBOX"
                        ((org-agenda-overriding-header "Tasks from Inbox to refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'gn/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'gn/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if gn/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'gn/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                    (if gn/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'gn/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if gn/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'gn/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'gn/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))

     (add-to-list 'org-agenda-custom-commands
          '("1" "Clients"
               ((agenda "")

                (tags "PRIORITY=\"A\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))

               (tags-todo "client"
                 ((org-agenda-skip-function
                  '(or (gn/org-skip-subtree-if-priority ?A)
                   (org-agenda-skip-if nil '(scheduled deadline)))))))))

     (add-to-list 'org-agenda-custom-commands
          '("c" "Simple agenda view"
               ((tags "PRIORITY=\"A\""
                 ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                  (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))
               (agenda "")
               (alltodo ""
                 ((org-agenda-skip-function
                  '(or (gn/org-skip-subtree-if-priority ?A)
                   (org-agenda-skip-if nil '(scheduled deadline)))))))))

     (add-to-list 'org-agenda-custom-commands
               '("2" . "COLLECT...") t)

     (add-to-list 'org-agenda-custom-commands
               '("2b" "CollectBox"
                 ((alltodo ""))))

     (add-to-list 'org-agenda-custom-commands
               '("f" . "FOCUS...") t)

     (add-to-list 'org-agenda-custom-commands
               '("rad" "All Tasks (grouped by Due Date)"
                 ((tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE=\"<+0d>\""
                             ((org-agenda-overriding-header "DUE TODAY")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE=\"<+1d>\""
                             ((org-agenda-overriding-header "DUE TOMORROW")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                             ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                             ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "DEADLINE>\"<+28d>\""
                             ((org-agenda-overriding-header "DUE LATER")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notdeadline))))
                  (tags-todo "TODO={WAIT}"
                             ((org-agenda-overriding-header "WAITING FOR")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'deadline))))
                  (todo ""
                        ((org-agenda-overriding-header "UNSCHEDULED")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'deadline)))))
                 ((org-agenda-sorting-strategy '(priority-down))
                  (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
                 "~/Dropbox/Org/all-tasks-by-due-date.pdf") t)

     (add-to-list 'org-agenda-custom-commands
               `("f." "Today"
                 ((agenda ""
                          ((org-agenda-entry-types '(:timestamp :sexp))
                           (org-agenda-overriding-header
                            (concat "CALENDAR Today: "
                                    (format-time-string "%a %d" (current-time))))
                           (org-agenda-span 'day)))
                  (tags-todo "LEVEL=1+REFILE"
                             ((org-agenda-overriding-header "COLLECTBOX (Unscheduled)")))
                  (tags-todo "DEADLINE=\"<+0d>\""
                             ((org-agenda-overriding-header "DUE TODAY")
                              (org-agenda-skip-function
                               '(org-agenda-skip-entry-if 'notedeadline))
                              (org-agenda-sorting-strategy '(priority-down))))
                  (tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")
                              (org-qagenda-skip-function
                               '(org-agenda-skip-entry-if 'notedeadline))
                              (org-agenda-sorting-strategy '(priority-down))))
                  (agenda ""
                          ((org-agenda-entry-types '(:scheduled))
                           (org-agenda-overriding-header "SCHEDULED")
                           (org-agenda-skip-function
                            '(org-agenda-skip-entry-if 'todo 'done))
                           (org-agenda-sorting-strategy
                            '(priority-down time-down))
                           (org-agenda-span 'day)
                           (org-agenda-start-on-weekday nil)
                           (org-agenda-time-grid nil)))
                  (todo "DONE"
                        ((org-agenda-overriding-header "COMPLETED"))))
                 ((org-agenda-format-date "")
                  (org-agenda-start-with-clockreport-mode nil))) t)

     (add-to-list 'org-agenda-custom-commands
               '("fh" "Hotlist"
                 ((tags-todo "DEADLINE<\"<+0d>\""
                             ((org-agenda-overriding-header "OVERDUE")))
                  (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                             ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                  (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                             ((org-agenda-overriding-header "FLAGGED"))))
                 ((org-agenda-todo-ignore-scheduled 'future)))  t)

     (add-to-list 'org-agenda-custom-commands
               '("r" . "REVIEW...") t)

     (add-to-list 'org-agenda-custom-commands
               '("ra" . "All Tasks...") t)

     (add-to-list 'org-agenda-custom-commands
               '("rt" . "Timesheet...") t)

     ;; Show what happened today.
     (add-to-list 'org-agenda-custom-commands
               '("rtd" "Daily Timesheet"
                 ((agenda ""))
                 ((org-agenda-log-mode-items '(clock closed))
                  (org-agenda-overriding-header "DAILY TIMESHEET")
                  (org-agenda-show-log 'clockcheck)
                  (org-agenda-span 'day)
                  (org-agenda-start-with-clockreport-mode t)
                  (org-agenda-time-grid nil))) t)

     ;; Show what happened this week.
     (add-to-list 'org-agenda-custom-commands
               '("rtw" "Weekly Timesheet"
                 ((agenda ""))
                 (
                  ;; (org-agenda-format-date "")
                  (org-agenda-overriding-header "WEEKLY TIMESHEET")
                  (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                  (org-agenda-span 'week)
                  (org-agenda-start-on-weekday 1)
                  (org-agenda-start-with-clockreport-mode t)
                  (org-agenda-time-grid nil))) t)

     (add-to-list 'org-agenda-custom-commands
               '("rc" . "Calendar...") t)

     (add-to-list 'org-agenda-custom-commands
               '("rc7" "Events and appointments for 7 days"
                 ((agenda ""))
                 ((org-agenda-entry-types '(:timestamp :sexp))
                  ;; (org-agenda-overriding-header "Calendar for 7 days")
                  (org-agenda-span 'week)
                  (org-agenda-format-date "\n%a %d")
                  ;; (org-agenda-date-weekend ... new face ...)
                  (org-agenda-time-grid nil))) t)

     (add-to-list 'org-agenda-custom-commands
               '("rw" "Weekly review"
                 ((tags "CATEGORY={@REFILE}&LEVEL<=2"
                        ((org-agenda-overriding-header "NEW TASKS")))
                  (agenda ""
                          ((org-agenda-clockreport-mode t)
                           (org-agenda-format-date
                            (concat "\n"
                                    "%Y-%m-%d" " %a "
                                    (make-string (window-width) ?_)))
                           (org-agenda-overriding-header "PAST WEEK")
                           (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                           (org-agenda-show-log 'clockcheck)
                           (org-agenda-span 7)
                           (org-agenda-start-day "-1w")
                           (org-deadline-warning-days 0)))
                  (agenda ""
                          ((org-agenda-overriding-header "NEXT MONTH")
                           (org-agenda-span 'month)
                           (org-agenda-start-day "+0d")
                           (org-deadline-warning-days 0)))
                  (todo "PROJECT"
                        ((org-agenda-overriding-header "PROJECT LIST")))
                  (todo "DONE|PROJECTDONE"
                        ((org-agenda-overriding-header
                          "Candidates to be archived"))))))

   #+end_src

   #+RESULTS:
   : ((rw Weekly review ((tags CATEGORY={@REFILE}&LEVEL<=2 ((org-agenda-overriding-header NEW TASKS))) (agenda  ((org-agenda-clockreport-mode t) (org-agenda-format-date (concat
   :  %Y-%m-%d  %a  (make-string (window-width) 95))) (org-agenda-overriding-header PAST WEEK) (org-agenda-prefix-format  %?-11t %i %-12:c% s) (org-agenda-show-log 'clockcheck) (org-agenda-span 7) (org-agenda-start-day -1w) (org-deadline-warning-days 0))) (agenda  ((org-agenda-overriding-header NEXT MONTH) (org-agenda-span 'month) (org-agenda-start-day +0d) (org-deadline-warning-days 0))) (todo PROJECT ((org-agenda-overriding-header PROJECT LIST))) (todo DONE|PROJECTDONE ((org-agenda-overriding-header Candidates to be archived))))) (2b CollectBox ((alltodo ))) (c Simple agenda view ((tags PRIORITY="A" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header HIGH PRIORITY ITEMS))) (agenda ) (alltodo  ((org-agenda-skip-function '(or (gn/org-skip-subtree-if-priority 65) (org-agenda-skip-if nil '(scheduled deadline)))))))) (1 Clients ((agenda ) (tags PRIORITY="A" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header HIGH PRIORITY ITEMS))) (tags-todo client ((org-agenda-skip-function '(or (gn/org-skip-subtree-if-priority 65) (org-agenda-skip-if nil '(scheduled deadline)))))))) (  Agenda ((agenda  nil) (tags-todo -CANCELLED/!NEXT ((org-agenda-overriding-header (concat Project Next Tasks (if gn/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function 'gn/skip-projects-and-habits-and-single-tasks) (org-tags-match-list-sublevels t) (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep)))) (tags -INBOX ((org-agenda-overriding-header Tasks from Inbox to refile) (org-tags-match-list-sublevels nil))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function 'gn/skip-non-stuck-projects) (org-agenda-sorting-strategy '(category-keep)))) (tags-todo -HOLD-CANCELLED/! ((org-agenda-overriding-header Projects) (org-agenda-skip-function 'gn/skip-non-projects) (org-tags-match-list-sublevels 'indented) (org-agenda-sorting-strategy '(category-keep)))) (tags-todo -REFILE-CANCELLED-WAITING-HOLD/! ((org-agenda-overriding-header (concat Project Subtasks (if gn/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function 'gn/skip-non-project-tasks) (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy '(category-keep)))) (tags-todo -REFILE-CANCELLED-WAITING-HOLD/! ((org-agenda-overriding-header (concat Standalone Tasks (if gn/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function 'gn/skip-project-tasks) (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy '(category-keep)))) (tags-todo -CANCELLED+WAITING|HOLD/! ((org-agenda-overriding-header (concat Waiting and Postponed Tasks (if gn/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function 'gn/skip-non-tasks) (org-tags-match-list-sublevels nil) (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks))) (tags -REFILE/ ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function 'gn/skip-non-archivable-tasks) (org-tags-match-list-sublevels nil)))) nil) (k Knowledge Investments tags KI ((org-agenda-overriding-header Knowledge Investments) (org-tags-match-list-sublevels t))) (N Notes tags NOTE ((org-agenda-overriding-header Notes) (org-tags-match-list-sublevels t))) (b Agenda gn/org-agenda-with-tip) (2 . COLLECT...) (f . FOCUS...) (rad All Tasks (grouped by Due Date) ((tags-todo DEADLINE<"<+0d>" ((org-agenda-overriding-header OVERDUE) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo DEADLINE="<+0d>" ((org-agenda-overriding-header DUE TODAY) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo DEADLINE="<+1d>" ((org-agenda-overriding-header DUE TOMORROW) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo DEADLINE>"<+1d>"+DEADLINE<="<+7d>" ((org-agenda-overriding-header DUE WITHIN A WEEK) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo DEADLINE>"<+7d>"+DEADLINE<="<+28d>" ((org-agenda-overriding-header DUE WITHIN A MONTH) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo DEADLINE>"<+28d>" ((org-agenda-overriding-header DUE LATER) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notdeadline)))) (tags-todo TODO={WAIT} ((org-agenda-overriding-header WAITING FOR) (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline)))) (todo  ((org-agenda-overriding-header UNSCHEDULED) (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline))))) ((org-agenda-sorting-strategy '(priority-down)) (org-agenda-write-buffer-name All Tasks (grouped by Due Date))) ~/Dropbox/Org/all-tasks-by-due-date.pdf) (f. Today ((agenda  ((org-agenda-entry-types '(:timestamp :sexp)) (org-agenda-overriding-header (concat CALENDAR Today:  (format-time-string %a %d (current-time)))) (org-agenda-span 'day))) (tags-todo LEVEL=1+REFILE ((org-agenda-overriding-header COLLECTBOX (Unscheduled)))) (tags-todo DEADLINE="<+0d>" ((org-agenda-overriding-header DUE TODAY) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notedeadline)) (org-agenda-sorting-strategy '(priority-down)))) (tags-todo DEADLINE<"<+0d>" ((org-agenda-overriding-header OVERDUE) (org-qagenda-skip-function '(org-agenda-skip-entry-if 'notedeadline)) (org-agenda-sorting-strategy '(priority-down)))) (agenda  ((org-agenda-entry-types '(:scheduled)) (org-agenda-overriding-header SCHEDULED) (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-sorting-strategy '(priority-down time-down)) (org-agenda-span 'day) (org-agenda-start-on-weekday nil) (org-agenda-time-grid nil))) (todo DONE ((org-agenda-overriding-header COMPLETED)))) ((org-agenda-format-date ) (org-agenda-start-with-clockreport-mode nil))) (fh Hotlist ((tags-todo DEADLINE<"<+0d>" ((org-agenda-overriding-header OVERDUE))) (tags-todo DEADLINE>="<+0d>"+DEADLINE<="<+1w>" ((org-agenda-overriding-header DUE IN NEXT 7 DAYS))) (tags-todo DEADLINE=""+FLAGGED|DEADLINE>"<+1w>"+FLAGGED ((org-agenda-overriding-header FLAGGED)))) ((org-agenda-todo-ignore-scheduled 'future))) (r . REVIEW...) (ra . All Tasks...) (rt . Timesheet...) (rtd Daily Timesheet ((agenda )) ((org-agenda-log-mode-items '(clock closed)) (org-agenda-overriding-header DAILY TIMESHEET) (org-agenda-show-log 'clockcheck) (org-agenda-span 'day) (org-agenda-start-with-clockreport-mode t) (org-agenda-time-grid nil))) (rtw Weekly Timesheet ((agenda )) ((org-agenda-overriding-header WEEKLY TIMESHEET) (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp)) (org-agenda-span 'week) (org-agenda-start-on-weekday 1) (org-agenda-start-with-clockreport-mode t) (org-agenda-time-grid nil))) (rc . Calendar...) (rc7 Events and appointments for 7 days ((agenda )) ((org-agenda-entry-types '(:timestamp :sexp)) (org-agenda-span 'week) (org-agenda-format-date
   : %a %d) (org-agenda-time-grid nil))))

   Org-Super-Agenda commands

   #+BEGIN_SRC emacs-lisp
     ;; TODO: Change this over to straight to install instead of quelpa
     (use-package org-super-agenda
       :ensure t
       :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
       :config
       (org-super-agenda-mode t)
       (add-to-list 'org-agenda-custom-commands
                 '("gt" "All Tasks - Grouped"
                   ((todo "" ((org-super-agenda-groups
                               '((:name "All Tasks" :auto-category t)))))))))
   #+end_src

** Org Pomodoro
   #+BEGIN_SRC emacs-lisp
     (use-package org-pomodoro
       :ensure t
       :after org-agenda
       :custom
         (org-pomodoro-ask-upon-killing t)
         (org-pomodoro-format "%s")  ;;     
         (org-pomodoro-short-break-format "%s")
         (org-pomodoro-long-break-format  "%s")
       :custom-face
         (org-pomodoro-mode-line ((t (:foreground "#ff5555"))))
         (org-pomodoro-mode-line-break   ((t (:foreground "#50fa7b"))))
       :hook
         (org-pomodoro-started . (lambda () (notifications-notify
           :title "org-pomodoro"
           :body "Let's focus for 25 minutes!")))
         (org-pomodoro-finished . (lambda () (notifications-notify
           :title "org-pomodoro"
           :body "Well done! Take a break.")))

       :bind (:map org-agenda-mode-map
       ("p" . org-pomodoro)))
   #+end_src

** Org-protocol
   #+BEGIN_SRC emacs-lisp
   (server-start)
   (require 'org-protocol)
   #+end_src

** Ox-Hugo
   Ox-hugo is an exporter backend that exports Org files to [[https://gohugo.io][Hugo]] compatible markdown.

   #+BEGIN_SRC emacs-lisp
      (use-package ox-hugo
        :ensure t
        :after ox)
   #+end_src

** Fonts in orgmode
  For Org mode tables and code blocks I want to use Fira Code
  #+BEGIN_SRC emacs-lisp
    (use-package face-remap
      :custom-face
      (fixed-pitch ((t (:family "Fira Code" :height 120))))
      (org-table ((t (:inherit fixed-pitch))))
      (org-block ((t (:inherit fixed-pitch))))
      :hook
      (org-mode-hook . variable-pitch-mode))
  #+end_src

  #+RESULTS:
  | variable-pitch-mode |
* Org-Roam
  #+BEGIN_SRC emacs-lisp
            (use-package org-roam
              :ensure t
              :init
              (setq org-roam-v2-ack t)
              :custom
              (org-roam-directory "~/Dropbox/Org/Notes")
              (org-roam-completion-everywhere t)
              :bind (("C-c n l" . org-roam-buffer-toggle)
                     ("C-c n f" . org-roam-node-find)
                     ("C-c n i" . org-roam-node-insert)
                     :map org-mode-map
                     ("C-M-i" . completion-at-point))
              :config
              (org-roam-setup))
  #+end_src

* iBuffer
  I use ibuffer a lot for switching between buffers from a list of available open buffers.
  These settings help to organize that list.

  #+Begin_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (autoload 'ibuffer "ibuffer" "List buffers." t)

    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Python"
                    (mode . python-mode))
                   ;; ("HTML"
                   ;; (mode . web-mode))
                   ;; ("JS"
                   ;; (or (mode . js2-mode)
                   ;;     (filename . ".js")))
                   ("Vue"
                    (or (mode . vue-mode)
                        (filename . ".vue")))
                   ("TXT"
                    (mode . text-mode))
                   ("YAML"
                    (filename . "yaml"))
                   ("Org" ;; all org-related buffers
                    (mode . org-mode))
                   ("Lisp"
                    (mode . emacs-lisp-mode))))))

    ;; don't show empty groups
    (setq ibuffer-show-empty-filter-groups nil)

    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))

    ;; Add full path to buffer title
    (setq frame-title-format
          (list (format "%s %%S: %%j " (system-name))
                '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
  #+end_src

* Passwords
  The "pass" program, aka "password-store", is a password manager that uses GPG and standand UNIX tools to handle passwords. Encrypted files are stored in a plain directory structure. Very simple, very nice: now all data is available with a variety of interfaces, such as standard CLI, a dmenu interface, a graphical front-end like qtpass, etc. Install it on Void Linux with xbps-install -S pass. The package below provides an Emacs interface to some of the most common actions, in the form of a list of candidates that can be narrowed down (such as with Ido). I use it to quickly store a password to the kill ring.

   #+BEGIN_SRC emacs-lisp
   (use-package password-store
     :ensure t
     :commands (password-store-copy
             password-store-edit
             password-store-insert)
     :custom
       (password-store-time-before-clipboard-restore 30))
   #+end_src

   And this one adds a major mode for browsing the pass keychain. Call it with M-x pass. There is a helpful section at the top with key bindings and their functions.

   #+BEGIN_SRC emacs-lisp
   (use-package pass
     :ensure t)
   #+end_src
* Hydra
   #+BEGIN_SRC  emacs-lisp
   (use-package hydra)

   (defhydra hydra-zoom (global-map "<f2>")
     "zoom"
     ("g" text-scale-increase "in")
     ("l" text-scale-decrease "out"))
   #+end_src

* Path from shell
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t
     :config
     (when (memq window-system '(mac ns x))
     (exec-path-from-shell-initialize)))
   #+end_src

* Projectile
   #+BEGIN_SRC emacs-lisp
      (use-package projectile
        :ensure t
        :bind-keymap
        ("C-c p" . projectile-command-map))
   #+end_src
* Pyenv
   #+BEGIN_SRC emacs-lisp
     (use-package pyenv-mode-auto
       :ensure t)

     (defun pyenv-activate-current-project ()
       "Automatically activates pyenv version if .python-version file exists."
       (interactive)
       (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
       (if python-version-directory
          (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                 (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
            (pyenv-mode-set pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))

     (defvar pyenv-current-version nil nil)

     (defun pyenv-init()
     "Initialize pyenv's current version to the global one."
     (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
      (message (concat "Setting pyenv version to " global-pyenv))
      (pyenv-mode-set global-pyenv)
      (setq pyenv-current-version global-pyenv)))

     (add-hook 'after-init-hook 'pyenv-init)

     (use-package pyenv-mode
       :ensure t)

     ;; Fixes an issue where pyenv conflicts with org-mode
     (eval-after-load 'pyenv-mode
       '(progn
        (define-key pyenv-mode-map (kbd "C-c C-s") nil)))

     (add-hook 'python-mode-hook #'display-fill-column-indicator-mode)
   #+end_src
* Flycheck
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       (setq flycheck-flake8rc "~/.config/flake8")
       (setq flycheck-python-flake8-executable "~/.pyenv/versions/emacs/bin/flake8"))
       ;; (flycheck-add-mode 'javascript-eslint 'js2-mode))
     ;;     :init (global-flycheck-mode))

     (add-hook 'python-mode-hook 'flycheck-mode)
   #+end_src

* Lsp-mode and lsp-ui
  Lsp-mode has gotten a lot better and I think I have it working really well for python development.
  `pip install python-language-server[all]` needs to be installed into each project in the virtualenvs for completions to work properly.
  'pip install python-lsp-server'
  I had tried to use a global shim but that would fail on any declaration in a project dependency.
  Note to self - ensure the project `.python-version` with the name of the pyenv inside it.

  For information about performance inspection and tweaks check the [[https://emacs-lsp.github.io/lsp-mode/page/performance/][lsp documentation]].

   #+BEGIN_SRC emacs-lisp

     (use-package yaml-mode
       :ensure t)

     (use-package lsp-mode
       :init (setq lsp-keymap-prefix "C-;")
       (defhydra hydra-lsp (:exit t :hint nil)
        "
        Buffer^^               Server^^                   Symbol
        -------------------------------------------------------------------------------------
        [_f_] format           [_M-r_] restart            [_d_] declaration  [_i_] implementation  [_o_] documentation
        [_m_] imenu            [_S_]   shutdown           [_D_] definition   [_t_] type            [_r_] rename
        [_x_] execute action   [_M-s_] describe session   [_R_] references   [_s_] signature"
        ("d" lsp-find-declaration)
        ("D" lsp-ui-peek-find-definitions)
        ("R" lsp-ui-peek-find-references)
        ("i" lsp-ui-peek-find-implementation)
        ("t" lsp-find-type-definition)
        ("s" lsp-signature-help)
        ("o" lsp-describe-thing-at-point)
        ("r" lsp-rename)

        ("f" lsp-format-buffer)
        ("m" lsp-ui-imenu)
        ("x" lsp-execute-code-action)

        ("M-s" lsp-describe-session)
        ("M-r" lsp-restart-workspace)
        ("S" lsp-shutdown-workspace))
       :config
        (define-key lsp-mode-map (kbd "C-c h") 'hydra-lsp/body)
       :hook ((python-mode . lsp)
              ;; (js2-mode . lsp)
              (yaml-mode . lsp)
              (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp lsp-deferred
       :ensure-system-package
         ((typescript-language-server . "npm install -g typescript-language-server")
          (javascript-typescript-langserver . "npm install -g javascript-typescript-langserver")
          (yaml-language-server . "npm install -g yaml-language-server")
          (tsc . "npm install -g typescript")))

     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode
       :custom
         (lsp-ui-doc-enable nil)
         (lsp-ui-doc-position 'top)
         (lsp-ui-doc-use-childframe t)
         (lsp-ui-doc-use-webkit t)
         (lsp-ui-doc-include-signature t)
         (lsp-ui-sideline-enable nil)
         ;; flycheck
         (lsp-ui-flycheck-enable t)
         (lsp-ui-flycheck-list-position 'right)
         (lsp-ui-flycheck-live-reporting t)
         ;; lsp-ui-imenu
         (lsp-ui-imenu-enable t)
         (lsp-ui-imenu-kind-position 'top) ;; top, bottom, or at-point
         (lsp-ui-peek-enable t)
         (lsp-ui-peek-list-width 60)
         (lsp-ui-peek-peek-height 25)
       :bind
         (:map lsp-mode-map
         ("C-c C-r" . lsp-ui-peek-find-references)
         ("C-c C-j" . lsp-ui-peek-find-definitions)
         ("C-c i"   . lsp-ui-peek-find-implementation)
         ("C-c m"   . lsp-ui-imenu)
         ("C-c s"   . lsp-ui-sideline-mode)
         ("C-c d"   . ladicle/toggle-lsp-ui-doc))
       :config
         (setq gc-cons-threshold 100000000)
         (setq read-process-output-max (* 1024 1024)) ;; 1mb
         (setq lsp-idle-delay 0.500)
         (add-hook 'lsp-ui-mode-hook #'(lambda() (setq-local flycheck-checker 'python-flake8))))

   #+end_src
* Black
     #+BEGIN_SRC emacs-lisp
       (use-package python-black
         :ensure t
         :quelpa
         (python-black
           :fetcher git
           :url "https://github.com/wbolster/emacs-python-black")
         :after python)
     #+end_src
* Company

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :config
       (setq company-minimum-prefix-length 1
             company-idle-delay 0
             company-tooltip-limit 10
             company-transformers nil
             company-show-numbers t)
       (global-company-mode +1))

     ;(use-package company-lsp
     ;  :ensure t
     ;  :after company
     ;  :config
     ;  (setq company-lsp-enable-snippet nil)
     ;  :init (add-to-list 'company-backends 'company-capf))

     (use-package company-box
       :ensure t
       :hook (company-mode . company-box-mode))
   #+end_src

* JSON

   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
     :defer t)
   #+end_src
* Javascript
  Getting a working Javascript environment proves to be difficult in Emacs.  I keep reading js-mode in Emacs 27 is really good but I can't find good documentation on what needs to be done.  js2-mode and web-mode are close but I still run into issue with React and Vue buffers.
  <2020-11-24 Tue> This is still not ideal.  Vue is a damn mess and javascript is just ok.  I need to spend more time with this configuration!
  <2020-09-08 Wed> Too many problems using emacs for React development so I nuked js2-mode and came up with a simpler solution.  Between ts-ls (typescript language server) and RJSX mode everything seems to be working very well right now.  I also got rid of web mode which I believe was causing so many indentation problems.

  #+BEGIN_SRC emacs-lisp
    (use-package rjsx-mode)

    (use-package prettier-js
          :ensure t
          :after rjsx-mode
          :defer t
          ;; :diminish prettier-js-mode
          :hook ((rjsx-mode . prettier-js-mode)))
          :config
          (setq prettier-js-args '("--trailing-comma" "all"
                                   "--bracket-spacing" "false"))
                                   ;; "--single-quotes" "true"))
  #+end_src

* Markdown

   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :commands (markdown-mode gfm-mode)
     :mode ("\\.md\\'"
            "\\.mkd\\'"
            "\\.markdown\\'")
     :init
     (setq mardown-command "multimarkdown"))
   #+end_src

* Racket
  For documentation on Racket, visit [[https://docs.racket-lang.org/index.html][the docs]].
  To install on Mac, `brew install cask racket` for the full install.  `brew install racket` is a minimal install.

  #+BEGIN_SRC emacs-lisp
 (use-package racket-mode
   :ensure t)
  #+end_src

* Smartparens
  Smartparens is a minor-mode for pairing parens, brackets, quotes, etc.  Very handy for Lisp development but also useful for Python.
  [[https://github.com/Fuco1/smartparens#getting-started][Documentation for Smartparens]].

  #+BEGIN_SRC emacs-lisp
 (use-package smartparens
  :ensure t
  :diminish smartparens-mode
  :config
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode 1)
    (show-paren-mode t)))
  #+end_src

* Deft
  #+BEGIN_SRC emacs-lisp
    (use-package deft
      :ensure t
      :bind ("<f8>" . deft)
      :commands (deft)
      :config
        (setq deft-directory "~/Dropbox/Org"
          deft-extensions '("org" "txt" "md"))
        (setq deft-default-extension "org")
        (setq deft-use-filename-as-title t)
        (setq deft-use-filter-string-for-filename t)
        (setq deft-file-naming-rules
        '((noslash . "_")
          (nospace . "_")
          (case-fn . downcase)))
     )
  #+end_src

  #+RESULTS:
  : deft

* Ivy, Swiper and Counsel
   I went from IDO to Helm and now going for a more minimalist lightweight solution in Ivy.

   #+BEGIN_SRC emacs-lisp
     (use-package ivy
       :ensure t
       :diminish ivy-mode
       :bind
       ("C-x B" . ivy-switch-buffer-other-window)
       :config
       (setq ivy-count-format ""  ; Slim down ivy display
             ivy-display-style nil
             ivy-minibuffer-faces nil)
       (setq projectile-completion-system 'ivy) ; Let projectile use ivy
       (ivy-mode 1))

     (use-package ivy-rich
       :ensure t
       :after ivy
       :delight
       :custom
       (ivy-virtual-abbreviate 'full)
       (ivy-rich-switch-buffer-align-virtual-buffer t)
       :config
       (ivy-rich-mode 1))

     (use-package all-the-icons-ivy
       :ensure t
       :after ivy-mode)

     (use-package all-the-icons-ivy-rich
       :ensure t
       :after ivy-rich
       :init (all-the-icons-ivy-rich-mode 1))

     ;; Ivy-based interface to standard commands
     (global-set-key (kbd "C-s") 'swiper)
     (global-set-key (kbd "M-x") 'counsel-M-x)
     (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     (global-set-key (kbd "<f1> l") 'counsel-find-library)
     (global-set-key (kbd "<f1> i") 'counsel-info-lookup-symbol)
     (global-set-key (kbd "<f1> u") 'counsel-unicode-char)
     ;; Ivy-based interface to shell and system tools
     (global-set-key (kbd "C-c g") 'counsel-git)
     (global-set-key (kbd "C-c j") 'counsel-git-grep)
     (global-set-key (kbd "C-c k") 'counsel-ag)
     (global-set-key (kbd "C-x l") 'counsel-locate)
     (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   #+end_src

* iMenu
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
  :ensure t
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
  #+end_src

* Magit
  TODO: Fix this!  On large repos, magit-todos causes magit to hang on commit.
  <2020-11-24 Tue> This still needs attention. I Haven't looked at the bug since I first left the comment and unset the configuration.

     #+BEGIN_SRC emacs-lisp
       ;;   (use-package magit-todos
       ;;   :after magit
       ;;   :after hl-todo
       ;;   :config
       ;;   (setq magit-todos-depth 2)
       ;;   (setq magit-todos-exclude-globs '("*.js.map"))
       ;;   (magit-todos-mode))

       (global-set-key (kbd "C-x g") 'magit-status)

       (use-package hl-todo
         :config
         ;; Adding a new keyword: TEST.
         (add-to-list 'hl-todo-keyword-faces '("TODO" . "gold"))
         (add-to-list 'hl-todo-keyword-faces '("Fixme" . "orange"))
         :init
         (add-hook 'python-mode-hook (lambda () (hl-todo-mode t)))
         )

   #+end_src

* Eyebrowse
  For saving window configs because I bounce around from project to project and org files a lot it's handy to save configs of windows instead of changing them constantly.
  <2020-11-24 Tue> For now this is working fine but Alphapapa has encouraged me to try out [[https://github.com/alphapapa/burly.el][Burly]], therefore I'm leaving this dev note here.

  #+BEGIN_SRC emacs-lisp
    (use-package eyebrowse
    :diminish eyebrowse-mode
    :init
    (setq eyebrowse-keymap-prefix (kbd "C-c M-e"))
    (global-unset-key (kbd "C-c C-w"))
    :config (progn
      (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
      (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
      (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
      (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
      (eyebrowse-mode t)
      (setq eyebrowse-new-workspace t)))
  #+end_src

* Highlight Indentation
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :diminish
    :functions (ivy-cleanup-string
                my-ivy-cleanup-indentation)
    :commands highlight-indent-guides--highlighter-default
    :functions my-indent-guides-for-all-but-first-column
    :hook ((prog-mode vue-mode vue-html-mode vue-javascript-mode) . highlight-indent-guides-mode)
    :init (setq highlight-indent-guides-method 'character
                highlight-indent-guides-responsive 'top)
    :config
    ;; Don't display indentations while editing with `company'
    (with-eval-after-load 'company
      (add-hook 'company-completion-started-hook
                (lambda (&rest _)
                  "Turn off indentation highlighting."
                  (when highlight-indent-guides-mode
                    (highlight-indent-guides-mode -1))))
      (add-hook 'company-after-completion-hook
                (lambda (&rest _)
                  "Turn on indentation highlighting."
                  (when (and (derived-mode-p 'prog-mode)
                             (not highlight-indent-guides-mode))
                    (highlight-indent-guides-mode 1)))))

    ;; Don't display first level of indentation
    (defun my-indent-guides-for-all-but-first-column (level responsive display)
      (unless (< level 1)
        (highlight-indent-guides--highlighter-default level responsive display)))
    (setq highlight-indent-guides-highlighter-function
          #'my-indent-guides-for-all-but-first-column)

    ;; Don't display indentations in `swiper'
    ;; https://github.com/DarthFennec/highlight-indent-guides/issues/40
    (with-eval-after-load 'ivy
      (defun my-ivy-cleanup-indentation (str)
        "Clean up indentation highlighting in ivy minibuffer."
        (let ((pos 0)
              (next 0)
              (limit (length str))
              (prop 'highlight-indent-guides-prop))
          (while (and pos next)
            (setq next (text-property-not-all pos limit prop nil str))
            (when next
              (setq pos (text-property-any next limit prop nil str))
              (ignore-errors
                (remove-text-properties next pos '(display nil face nil) str))))))
      (advice-add #'ivy-cleanup-string :after #'my-ivy-cleanup-indentation)))
   #+end_src

* Ace Window
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
  (global-set-key (kbd "M-o") 'ace-window)
  #+end_src
* Mode Line
  Customizing the mode line...
  I was using powerline mode but I kind of like the doom modeline better.

  #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
      :ensure t
      ;; if the icon fonts are broken, run `M-x all-the-icons-install-fonts`
      :init (doom-modeline-mode 1))
  #+end_src
* Alerts
  Using Jweigly's [[https://github.com/jwiegley/alert][Alert]] to pipe alerts to mac os x notifications

  #+BEGIN_SRC emacs-lisp
    (use-package alert
      :defer t
      :ensure t
      :commands (alert)
      :custom
      (alert-default-style 'osx-notifier))
  #+end_src
