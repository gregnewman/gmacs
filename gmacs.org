#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs to include orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate
  programming using Org-mode for a much cleaner and readable configuration.

  If you are borrowing or using pieces of this config you can copy pieces of it
  into a scratch file and run `M-x eval-buffer` to try them out.

  If you’re viewing the Org file, you can open source code blocks (those are the
  ones in begin_src) in a separate buffer by moving your point inside them and
  typing C-c ’ (org-edit-special). This opens another buffer in emacs-lisp-mode,
  so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function,
  and then call it.
* Configurations
** Packages
   Use `use-package` so that all packages are automatically installed if cloning
   this repo for another machine.

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
   (package-initialize)

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   (setq custom-file (make-temp-file "emacs-custom"))
   #+END_SRC

** Theme
   Currently using spacemacs-them until I can find one that appeals to me.
   The artist in me is very picky with themes and nothing I've tried is pleasing, yet.
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package spacemacs-theme
     :ensure t
     :defer t
     :init
     (load-theme 'spacemacs-dark t))
   #+end_src

** Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.

   #+BEGIN_SRC emacs-lisp
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode 1)
     (scroll-bar-mode -1))
   #+end_src

** Basics and general settings
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp
   ; Set user full name
   (setq user-full-name "Greg Newman"
         user-mail-address "greg@gregnewman.org")

   ; line numbers
   (global-display-line-numbers-mode 1)
   (setq display-line-numbers-width-start t)

   ; no hate tabs
   (setq-default indent-tabs-mode nil)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (use-package whitespace
     :init
     (dolist (hook '(prog-mode-hook text-mode-hook))
       (add-hook hook #'whitespace-mode))
     (add-hook 'before-save-hook #'whitespace-cleanup)
     :config
       (setq whitespace-line-column 80) ;; limit line length
       (setq whitespace-style '(face tabs empty trailing lines-tail)))

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Desktop setup.
   (desktop-save-mode 1)
   (setq desktop-dirname "~/.emacs.d/desktops/")
   (setq desktop-base-file-name (concat ".desktop." (system-name)))
   (setq desktop-path (list desktop-dirname))
   (setq desktop-base-lock-name "lock")
   (setq desktop-load-locked-desktop t)

   ; Font
   (set-frame-font "Office Code Pro 11")

   ; Projectile
   (use-package projectile
     :bind-keymap
     ("C-c p" . projectile-command-map))

   ; Git Gutter
   (use-package git-gutter
     :ensure t
     :diminish git-gutter-mode
     :config (global-git-gutter-mode)
     :init
     (progn
       (setq git-gutter:separator-sign " "
           git-gutter:lighter " GG"))
     :config
       (progn
         (set-face-background 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-background 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-background 'git-gutter:added "#546E00")
         (set-face-foreground 'git-gutter:added "#546E00"))
     :bind (("C-x p" . git-gutter:previous-hunk)
       ("C-x n" . git-gutter:next-hunk)
       ("C-x v =" . git-gutter:popup-hunk)
       ("C-x v r" . git-gutter:revert-hunk)))

   ; Browse Dash documentation
   (use-package counsel-dash
     :config
     (setq counsel-dash-common-docsets '("Javascript" "Python_3")))

   ; Because i forget keyboard shortcuts
   (use-package guide-key
     :defer t
     :diminish guide-key-mode
     :config
     (progn
     (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
     (guide-key-mode 1)))

   ;; Move to beginning of line.
   ;; Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
   (defun my/smarter-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first.  If
   point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'my/smarter-move-beginning-of-line)

    ;; set shell to zsh
    (setq explicit-shell-file-name "/bin/zsh")

    ;; control backups
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

    ;; always how paren highlights
    (show-paren-mode 1)

    ;; telephone line for better mode line
    (use-package telephone-line
      :ensure t
      :config
      (telephone-line-mode 1))

    ;; icons
    (use-package all-the-icons)
   #+end_src

 ** iBuffer-mode

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("RJ2" (filename . "/code/rejoiner/"))
            ("TIP" (filename . "/code/tip/"))
            ("Python"
                (mode . python-mode))
            ("HTML"
                (mode . web-mode))
            ("JS"
                (mode . js-mode))
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Lisp"
                (mode . emacs-lisp-mode)
                )))))

   ;; don't show empty groups
   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Add full path to buffer title
   (setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

** Reverting buffers
   Very useful if dealing with git repos and also files that can change from Dropbox

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

** Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

** Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

** Python
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t)
   #+end_src

   Configure the LSP server and UI
   Taken from https://github.com/xhcoding/ms-python

   #+BEGIN_SRC emacs-lisp
   (defun +my-python/enable-lsp()
     (unless pyvenv-virtual-env-name
       (pyvenv-activate "/path/to/venv/"))
     (lsp)
     ;; You also can put the code for change checker here.
     (setq-local flycheck-checker 'python-pylint))

   (add-hook 'python-mode-hook #'+my-python/enable-lsp)

   ;; TODO: add dap-mode

   (use-package projectile
     :ensure t)

   (use-package lsp-mode
     :ensure t)

   (use-package lsp-ui
     :ensure t
     :config
       (setq lsp-ui-doc-max-height 20
       	     lsp-ui-doc-max-width 50
	     lsp-ui-sideline-ignore-duplicate t
	     lsp-ui-peek-always-show t))

   (use-package company
     :ensure t
     :config
       (setq company-minimum-prefix-length 1
	     company-idle-delay 0
	     company-tooltip-limit 10
	     company-transformers nil
	     company-show-numbers t)
   (global-company-mode +1))

   (use-package company-lsp
     :ensure t
     :commands (company-lsp))

   (use-package company-box
     :ensure t
     :hook (company-mode . company-box-mode))

   (use-package ms-python
     :config
       (add-hook 'python-mode-hook #'lsp))

   ;; taken from
   ;; https://thegreata.pe/articles/2015/10/24/setting-up-evil-mode-friendly-ctags-in-emacs/
   (defun regenerate-tags ()
     (interactive)
     (let ((tags-directory (directory-file-name (projectile-project-root))))
       (shell-command
       (format "ctags -f %s -e -R %s" tags-file-name tags-directory))))

   (use-package ctags-update
     :ensure t
     :config
       (progn
         (add-hook 'python-mode-hook 'turn-on-ctags-auto-update-mode)))

   #+end_src

** JSON

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package json-mode
     :defer t)
   #+end_src

** Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package markdown-mode
     :commands (markdown-mode gfm-mode)
     :mode ("\\.md\\'"
            "\\.mkd\\'"
            "\\.markdown\\'")
     :init
     (setq mardown-command "multimarkdown"))
   #+end_src

** Org-mode

   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/code/org-mode/contrib/lisp" t)
   #+end_src

*** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '(
       (python . t)
       (emacs-lisp . t)
       (js . t)
       (org . t)
       (sass . t)
       (sql . t)
     ))
     ;; Syntax highlight in #+BEGIN_SRC blocks
     (setq org-src-fontify-natively t)
     ;; Don't prompt before running code in org
     (setq org-confirm-babel-evaluate nil)

   #+end_src

*** Text files
    I also work on these notes in Notesy on the iphone so I have set txt filesto open as org.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+end_src

*** Misc Org settings
   Org-mode is ugly with all the leading stars.  I'm going to turn those off
   and use org-bullets for a much cleaner presentation.
   #+BEGIN_SRC emacs-lisp
     (setq org-hide-leading-stars t)

     ;; Org bullets for prettier org files
     (use-package org-bullets
     :commands org-bullets-mode
     :init
     (add-hook 'org-mode-hook 'org-bullets-mode)
     (setq org-bullets-bullet-list '("◉" "○" "●" "►" "•")))

     ;; respects splits
     (setq org-agenda-window-setup 'current-window)

     ;; Keywords
     (setq org-todo-keywords
     '((sequence
      "TODO(t)"
      "STARTED(s)"
      "WAITING(w@/!)"
      "SOMEDAY(.)" "|" "DONE(x!)" "CANCELLED(c@)")))

     (setq org-log-done 'time)
     (setq org-log-done 'time)
     (setq org-log-redeadline 'time)
     (setq org-log-reschedule 'time)

     ;; tags - TODO: Redo these tags to mimic omnifocus
     (setq org-tag-alist '(("@work" . ?w)
                        ("@home" . ?h)
                        ("@errands" . ?e)
                        ("@drawing" . ?d)
                        ("@current" . ?c)
                        ("@guitar" . ?g)
                        ("@learning" . ?l)
                        ("@phone" . ?p)
                        ("@email" . ?m)
                        ("@reading" . ?r)
                        ("@studio" . ?s)
                        ("@watch" . ?v)
                        ("@thinking" . ?t)))

     ;; efforts
     (add-to-list 'org-global-properties
        '("Effort_ALL". "0:05 0:15 0:30 0:45 1:00 2:00 3:00 4:00 6:00 7:00 8:00 9:00 10:00 0:00"))

     ;; agenda files
     (setq org-agenda-files
        (delq nil
              (mapcar (lambda (x) (and (file-exists-p x) x))
                      `("~/Dropbox/Org/freelance.org"
                        "~/Dropbox/Org/mac_to_linux.org"
                        "~/Dropbox/Org/learning.org"
                        "~/Dropbox/Org/classical_guitar.org"
                        "~/Dropbox/Org/me.org"
                        "~/Dropbox/Org/family.org"
                        "~/Dropbox/Org/finance.org"
                        "~/Dropbox/Org/home_and_cars.org"
                        "~/Dropbox/Org/studio.org"
                        "~/Dropbox/Org/book_notes.org"
                        "~/Dropbox/Org/journal.org"
                        "~/.emacs.d/gmacs.org"
                        "~/Dropbox/Org/org-mode.org"
                        "~/Dropbox/Org/refile.org"
                        "~/Dropbox/Org/inbox.org"
                        "~/Dropbox/Org/running.org"))))

     ;; agenda
     (setq org-agenda-span 5)
     (setq org-agenda-tags-column -100) ; take advantage of the screen width
     (setq org-agenda-sticky nil)
     (setq org-agenda-inhibit-startup t)
     (setq org-agenda-use-tag-inheritance t)
     (setq org-agenda-show-log t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
     (setq org-agenda-time-grid
        '((daily today require-timed)
         "----------------"
         (800 1000 1200 1400 1600 1800)))
     (setq org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")

     ;; The following lines are always needed.  Choose your own keys.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
   #+end_src

*** Org-capture
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-directory "~/Dropbox/Org")
   (setq org-default-notes-file "~/Dropbox/Org/refile.org")

   ;; I use C-c c to start capture mode
   (global-set-key (kbd "C-c c") 'org-capture)

   ;; Capture templates
   (setq org-capture-templates
       (quote (("n" "note" entry (file "~/Dropbox/Org/refile.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
               ("j" "Journal" entry (file+datetree "~/Dropbox/Org/journal.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
               ("m" "Meeting" entry (file "~/Dropbox/Org/refile.org")
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
               ("p" "Phone call" entry (file "~/Dropbox/Org/refile.org")
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

   ;; enable line breaks
   (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

   ;; Don't allow parent to be marked done unless children are done
   (setq org-enforce-todo-dependencies t)
   (setq org-enforce-todo-checkbox-dependencies t)
   (setq org-fontify-done-headline t)
   (setq org-startup-folded nil)
   #+end_src

*** Org faces and styling
   Customizing the font sizes due to the theme I'm using making them HUGE
   #+BEGIN_SRC emacs-lisp :tangle yes
   (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.0 :width normal :background "#1c1c1c"))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.0 :foreground "gray" :weight normal))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
     '(org-headline-done ((t (:foreground "dim gray" :inherit))))
     '(org-agenda-clocking ((t (:inherit secondary-selection :foreground "black"))) t)
     '(variable-pitch ((t (:family "Fira Mono" :weight light))))
     '(fixed-pitch ((t ( :family "Fira Mon" :slant normal :weight normal :width normal))))
     '(org-block                 ((t (:inherit fixed-pitch))))
     '(org-document-info         ((t (:foreground "dark orange"))))
     '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
     '(org-link                  ((t (:foreground "royal blue" :underline t))))
     '(org-meta-line             ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-property-value        ((t (:inherit fixed-pitch))) t)
     '(org-special-keyword       ((t (:inherit (font-lock-comment-face fixed-pitch)))))
     '(org-tag                   ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
     '(org-verbatim              ((t (:inherit (shadow fixed-pitch)))))
     '(org-indent                ((t (:inherit (org-hide fixed-pitch)))))
     '(org-mode-line-clock       ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button)))))
   )

   (add-hook 'org-mode-hook 'variable-pitch-mode)

   (setq org-blank-before-new-entry (quote ((heading)
                                         (plain-list-item . auto))))
   (setq org-insert-heading-respect-content nil)
   (setq org-cycle-separator-lines 1)

   (setq org-todo-keyword-faces
     '(("TODO" . (:foreground "green" :weight bold :inherit))
       ("DONE" . (:foreground "dim gray" :weight normal :inherit))
       ("WAITING" . (:foreground "red" :weight bold :inherit))
       ("SOMEDAY" . (:foreground "gray" :weight bold :inherit))))
   #+end_src

*** Agenda commands
    Pulled some ideas from https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html

   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun air-org-skip-subtree-if-priority (priority)
   "Skip an agenda subtree if it has a priority of PRIORITY.

   PRIORITY may be one of the characters ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
        subtree-end
      nil)))

      (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
          ((tags "PRIORITY=\"A\""
            ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
            (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
            ((org-agenda-skip-function
            '(or (air-org-skip-subtree-if-priority ?A)
            (org-agenda-skip-if nil '(scheduled deadline))))))))))

#+end_src

*** Org Pomodoro
   #+BEGIN_SRC emacs-lisp
    (use-package org-pomodoro
      :after org-agenda
      :custom
        (org-pomodoro-ask-upon-killing t)
        (org-pomodoro-format "%s")  ;;     
        (org-pomodoro-short-break-format "%s")
        (org-pomodoro-long-break-format  "%s")
      :custom-face
        (org-pomodoro-mode-line ((t (:foreground "#ff5555"))))
        (org-pomodoro-mode-line-break   ((t (:foreground "#50fa7b"))))
      :hook
        (org-pomodoro-started . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Let's focus for 25 minutes!")))
        (org-pomodoro-finished . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Well done! Take a break.")))

      :bind (:map org-agenda-mode-map
      ("p" . org-pomodoro)))

   ;; enable indent mode
   (setq org-indent-mode t)
   (setq org-fontify-whole-heading-line t
      org-fontify-done-headline t
      org-fontify-quote-and-verse-blocks t)
   #+end_src

** Ivy, Swiper and Counsel
   I went from IDO to Helm and now going for a more minimalist
   lightweight solution in Ivy.

   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish ivy-mode
     :config
     (ivy-mode 1))

   ;(ivy-mode 1)
   ;(setq ivy-use-virtual-buffers t)
   ;(setq ivy-count-format "(%d/%d) ")
   ;; Ivy-based interface to standard commands
   (global-set-key (kbd "C-s") 'swiper)
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   ;; Ivy-based interface to shell and system tools
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   (use-package ivy-rich
     :ensure t
     :after (ivy)
     :init
     (setq ivy-rich-path-style 'abbrev
        ivy-virtual-abbreviate 'full)
     :config (ivy-rich-mode 1))
   #+end_src

** Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src
