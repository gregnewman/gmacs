#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs for emacs and orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate
  programming using Org-mode for a documented configuration.

  If you’re viewing the Org file, you can open source code blocks (those are the
  ones in begin_src) in a separate buffer by moving your point inside them and
  typing C-c ’ (org-edit-special). This opens another buffer in emacs-lisp-mode,
  so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function,
  and then call it.
* Packages
   Use `use-package` so that all packages are automatically installed if cloning
   this repo for another machine.

   [[https://github.com/quelpa/quelpa][Quelpa]] grabs and builds packages from source (e.g. Github).

   Along with the quelpa package, quelpa-use-package adds a handler to
   use-package.

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
   (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
   (setq package-check-signature nil)
   (package-initialize)

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   (setq custom-file (make-temp-file "emacs-custom"))

   (use-package quelpa)
   (use-package quelpa-use-package :ensure t)

   ;; Handle the `use-package-always-ensure' setting
   (quelpa-use-package-activate-advice)
   #+END_SRC

* Theme
   Back to dracula with some modifications to face for orgmode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package solarized-theme
       :if (not window-system)
       :ensure t)
   #+end_src

* Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.

   #+BEGIN_SRC emacs-lisp
   (tooltip-mode -1)
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+end_src

* Basics and general settings
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp
   ; Set user full name
   (setq user-full-name "Greg Newman"
         user-mail-address "greg@gregnewman.org")

   ; line numbers
   (global-display-line-numbers-mode)
   (setq-default display-line-numbers-width 3)

   ; no hate tabs
   (setq-default indent-tabs-mode nil)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)
   (set-face-background 'hl-line "gray15")

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (use-package whitespace
     :init
     (dolist (hook '(prog-mode-hook text-mode-hook))
       (add-hook hook #'whitespace-mode))
     (add-hook 'before-save-hook #'whitespace-cleanup)
     :config
       (setq whitespace-global-modes '(not org-mode))
       (setq whitespace-line-column 80) ;; limit line length
       (setq whitespace-style '(face tabs empty trailing lines-tail)))

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Desktop setup.
   (desktop-save-mode 1)
   (setq desktop-dirname "~/.emacs.d/desktops/")
   (setq desktop-base-file-name (concat ".desktop." (system-name)))
   (setq desktop-path (list desktop-dirname))
   (setq desktop-base-lock-name "lock")
   (setq desktop-load-locked-desktop t)

   ; Font
   (set-frame-font "Office Code Pro 10")

   ; Projectile
   (use-package projectile
     :bind-keymap
     ("C-c p" . projectile-command-map))

   ; Git Gutter
   (use-package git-gutter
     :ensure t
     :diminish git-gutter-mode
     :config (global-git-gutter-mode)
     :init
     (progn
       (setq git-gutter:separator-sign " "
           git-gutter:lighter " GG"))
     :config
       (progn
         (set-face-background 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-background 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-background 'git-gutter:added "#546E00")
         (set-face-foreground 'git-gutter:added "#546E00"))
     :bind (("C-x p" . git-gutter:previous-hunk)
       ("C-x n" . git-gutter:next-hunk)
       ("C-x v =" . git-gutter:popup-hunk)
       ("C-x v r" . git-gutter:revert-hunk)))

   ; Browse Dash documentation
   (use-package counsel-dash
     :config
     (setq counsel-dash-common-docsets '("Javascript" "Python_3")))

   ; Because i forget keyboard shortcuts
   (use-package guide-key
     :defer t
     :diminish guide-key-mode
     :config
     (progn
     (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
     (guide-key-mode 1)))

;;   (defun guide-key/my-hook-function-for-org-mode ()
;;     (guide-key/add-local-guide-key-sequence "C-c")
;;     (guide-key/add-local-highlight-command-regexp "org-"))
;;   (add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)

   ;; Move to beginning of line.
   ;; Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
   (defun my/smarter-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first.  If
   point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'my/smarter-move-beginning-of-line)

    ;; set shell to zsh
    (setq explicit-shell-file-name "/bin/zsh")

    ;; control backups
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

    ;; always how paren highlights
    (show-paren-mode 1)

    ;; icons
    (use-package all-the-icons)

    ;; javascript indents
    (setq js-indent-level 2)
   #+end_src

* Org-mode
  [[https://gettingthingsdone.com/][Getting Things Done]] (GTD), is a grouping of productivity processes following five basic principles.

  * Capture - Everything in your mind needs to be captured because your mind is "a horrible office".  This is typically the inbox.org file in my setup but is also done in analog notebooks, email and voice memos.
  * Clarify - Every task that doesn't take two minutes to do should be broken down into actionable tasks that simplify the larger scope of the project.
  * Organize - All projects and next actions are organized into areas, assigned due dates if needed, prioritized and effort estimates added to them.  If the tasks/projects are not something to do right now they are still organized for later consumption.  Anything that needs to be on the calendar should be added but keep the calendar sacred.  Calendars should only be for appointments or hard-carved blocks of time.
  * Reviews - Reviews should be handled on a regular basis.  I do a daily review of what should be the priorities for the day but I also do weekly and monthly reviews to keep my systems from getting stale and/or stuck.
  * Engage - Choose the next action and get to work.

  As a software craftsman I spend my days in Emacs. [[https://orgmode.org/][Orgmode]] is a perfect solution for keeping me honest with my system(s) and having it ready at a keystroke.  My files are plain text files with the .org extenstion and synced between my laptops and mobile devices using Dropbox.


** Installation via Git repo
   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/code/org-mode/contrib/lisp" t)

   (setq org-modules '(org-info
                      org-panel
                      org-protocol
                      org-toc))
   (eval-after-load 'org
     '(org-load-modules-maybe t))
   #+end_src
** Org Setup
   #+BEGIN_SRC emacs-lisp
     ;; respects splits
     (setq org-agenda-window-setup 'current-window)
     ;; agenda files
     (setq org-agenda-files '("~/Dropbox/Org/"))
     ;; Start the weekly agenda on Monday
     (setq org-agenda-start-on-weekday 1)
     ;; Display tags farther right
     (setq org-agenda-tags-column -102)
     (setq org-agenda-span 5)
     (setq org-agenda-tags-column -100) ; take advantage of the screen width
     (setq org-agenda-sticky nil)
     (setq org-agenda-inhibit-startup t)
     (setq org-agenda-use-tag-inheritance t)
     (setq org-agenda-show-log t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
     (setq org-columns-default-format "%14SCHEDULED %Effort{:} %CLOCKSUM_T{:} %1PRIORITY %TODO %50ITEM %TAGS")
     ;; The following lines are always needed.  Choose your own keys.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     ;; enable line breaks
     (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

     ;; Don't allow parent to be marked done unless children are done
     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)
     (setq org-fontify-done-headline t)
     (setq org-startup-folded t)

     ;; Refiling
     (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
   #+end_src

** GTD
   These are functions for use in Agenda commands for stuck projects.
   Attribution: [[http://doc.norang.ca/org-mode.html#GTD][Bernt Hansen - Norang]]
   #+BEGIN_SRC emacs-lisp
(defun gn/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))

(defun gn/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun gn/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun gn/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (gn/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun gn/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun gn/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun gn/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun gn/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar gn/hide-scheduled-and-waiting-next-tasks t)

(defun gn/toggle-next-task-display ()
  (interactive)
  (setq gn/hide-scheduled-and-waiting-next-tasks (not gn/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if gn/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun gn/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (gn/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun gn/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (gn/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (gn/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun gn/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (gn/list-sublevels-for-projects-indented)
  (if (save-excursion (gn/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((gn/is-project-p)
            nil)
           ((and (gn/is-project-subtree-p) (not (gn/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun gn/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((gn/is-task-p)
        nil)
       (t
        next-headline)))))

(defun gn/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((and gn/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((gn/is-project-p)
        next-headline)
       ((and (gn/is-task-p) (not (gn/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun gn/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((gn/is-project-p)
        next-headline)
       ((and (not limit-to-project)
             (gn/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (gn/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun gn/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
      ((gn/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((gn/is-project-p)
        next-headline)
       ((and (gn/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (gn/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun gn/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((gn/is-project-p)
        subtree-end)
       (t
        nil)))))

(defun gn/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (gn/is-subproject-p)
        nil
      next-headline)))
   #+end_src

   #+RESULTS:
   : gn/skip-non-subprojects

** Estimates and clocking
   I need to track time for clients and projects.  This nudges me when I clock in
   to make sure I have an estimate set.

   #+BEGIN_SRC emacs-lisp
   (defun gn/org-mode-ask-effort ()
     "Ask for an effort estimate when clocking in."
     (unless (org-entry-get (point) "Effort")
       (let ((effort
              (completing-read
               "Effort: "
               (org-entry-get-multivalued-property (point) "Effort"))))
       (unless (equal effort "")
         (org-set-property "Effort" effort)))))

   (add-hook 'org-clock-in-prepare-hook
     'gn/org-mode-ask-effort)

   ;; Remove empty LOGBOOK drawers on clock out
   (defun gn/remove-empty-drawer-on-clock-out ()
     (interactive)
     (save-excursion
     (beginning-of-line 0)
     (org-remove-empty-drawer-at "LOGBOOK" (point))))

   (add-hook 'org-clock-out-hook 'gn/remove-empty-drawer-on-clock-out 'append)

   ;; efforts
   (add-to-list 'org-global-properties
        '("Effort_ALL". "0:05 0:15 0:30 0:45 1:00 2:00 3:00 4:00 6:00 7:00 8:00 9:00 10:00 0:00"))
   #+end_src
** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '(
        (python . t)
        (emacs-lisp . t)
        (org . t)
        (sql . t)
     ))
     ;; Syntax highlight in #+BEGIN_SRC blocks
     (setq org-src-fontify-natively t)
     ;; Don't prompt before running code in org
     (setq org-confirm-babel-evaluate nil)
   #+end_src
** Keywords and Tags
*** Todo Keywords
    Setting up my todo keywords which are global and their relative colors.
   #+BEGIN_SRC emacs-lisp
    ;; Keywords
    (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

    (setq org-todo-keyword-faces
      (quote (("TODO" :foreground "lime green" :weight bold)
              ("NEXT" :foreground "cyan" :weight bold)
              ("DONE" :foreground "dim gray" :weight bold)
              ("WAITING" :foreground "tomato" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "dim gray" :weight bold)
              ("MEETING" :foreground "orange2" :weight bold)
              ("PHONE" :foreground "yellow2" :weight bold))))
   #+end_src
*** Fast todo selection
     Fast todo selection allows changing from any task todo state to any
     other state directly by selecting the appropriate key from the fast
     todo selection key menu. This is a great feature!
   #+BEGIN_SRC emacs-lisp
     (setq org-use-fast-todo-selection t)
   #+end_src

     Allows changing todo states with S-left and S-right skipping all of
     the normal processing when entering or leaving a todo state. This
     cycles through the todo states but skips setting timestamps and
     entering notes which is very convenient when all you want to do is
     fix up the status of an entry.
   #+BEGIN_SRC emacs-lisp
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)

     (setq org-log-done 'time)
     (setq org-log-redeadline 'time)
     (setq org-log-reschedule 'time)
   #+end_src
*** Todo state triggers
    I have a few triggers that automatically assign tags to tasks
    based on state changes. If a task moves to CANCELLED state then it
    gets a CANCELLED tag. Moving a CANCELLED task back to TODO removes
    the CANCELLED tag. These are used for filtering tasks in agenda
    views which I'll talk about later.

    The triggers break down to the following rules:

    Moving a task to CANCELLED adds a CANCELLED tag
    Moving a task to WAITING adds a WAITING tag
    Moving a task to HOLD adds WAITING and HOLD tags
    Moving a task to a done state removes WAITING and HOLD tags
    Moving a task to TODO removes WAITING, CANCELLED, and HOLD tags
    Moving a task to NEXT removes WAITING, CANCELLED, and HOLD tags
    Moving a task to DONE removes WAITING, CANCELLED, and HOLD tags
    The tags are used to filter tasks in the agenda views conveniently.

    Attribution: [[http://doc.norang.ca/org-mode.html][http://doc.norang.ca/org-mode.html]]

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
   #+end_src
*** Tags
    The tags I'm currently using have gone through a few iterations
    and probably will a few more times until I settle on a structure I
    like.  I am not religious about using tags but some of them allow
    me better filtering for clock reports, which I use for billing and
    for narrowing agendas.

   #+BEGIN_SRC emacs-lisp
     (setq org-tag-alist '((:startgroup)
                           ("client" . ?c)
                           ("home" . ?h)
                           ("studio" . ?s)
                           ("guitar" . ?g)
                           ("finance" . ?f)
                           ("agenda" . ?a)
                           ("errands" . ?e)
                           ("learning" . ?l)
                           (:endgroup)
                           ("PROJECT" . ?p)
                           ("phone" . ?t)
                           ("email" . ?m)
                           ("read" . ?r)
                           ("HOLD" . ?H)
                           ("NOTE" . ?n)
                           ("FLAGGED" . ?F)
                           ("WAITING" . ?W)
                           ("watch" . ?w)))
   #+end_src
** Sticky agendas
   Allow you to have more than one agenda view created simultaneously.
   You can quickly switch to the view without incurring an agenda
   rebuild by invoking the agenda custom command key that normally
   generates the agenda. If it already exists it will display the
   existing view. g forces regeneration of the agenda view.  I
   normally have two views displayed (F12 a for the daily/weekly
   agenda and F12 SPC for my project management view)

   #+BEGIN_SRC emacs-lisp
   ;; Use sticky agenda's so they persist
   (setq org-agenda-sticky t)
   #+end_src
** Org-capture
   Capture helps me stay on track during my day.  As distraction and
   thoughts try to steal my time, I can quickly add a note or task to
   be refiled and dealt with later.  The same goes for phone calls and
   meetings.
*** Directories and files
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-directory "~/Dropbox/Org")
   (setq org-default-notes-file "~/Dropbox/Org/inbox.org")
   #+end_src
*** Capture mode keybinding
   I use C-c c to start capture mode
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c c") 'org-capture)
   #+end_src
*** Capture templates
   #+BEGIN_SRC emacs-lisp
   ;; Capture templates
   (setq org-capture-templates
       (quote (("t" "todo" entry (file "~/Dropbox/Org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-keep t)
               ("n" "note" entry (file "~/Dropbox/Org/inbox.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-keep t)
               ("j" "Journal" entry (file+datetree "~/Dropbox/Org/journal.org")
               "* %?\n%U\n" :clock-keep t)
               ("d" "Daily Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                (file "~/Dropbox/Org/templates/daily_review.org"))
               ("w" "Weekly Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                (file "~/Dropbox/Org/templates/weekly_review.org"))
               ("m" "Monthly Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                (file "~/Dropbox/Org/templates/monthly_review.org"))
               ("p" "Phone call" entry (file "~/Dropbox/Org/inbox.org")
                "* PHONE %? :PHONE:\n%U" :clock-keep t))))
   #+end_src
*** Reviews
   #+BEGIN_SRC emacs-lisp
   (defun gn/daily-review ()
    (interactive)
    (let ((org-capture-templates '(("d" "Review: Daily Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                                  (file "~/Dropbox/Org/templates/daily_review.org")))))
    (progn
      (org-capture nil "d")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

   (defun gn/weekly-review ()
    (interactive)
    (let ((org-capture-templates '(("w" "Review: Weekly Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                                  (file "~/Dropbox/Org/templates/weekly_review.org")))))
    (progn
      (org-capture nil "w")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

   (defun gn/monthly-review ()
    (interactive)
    (let ((org-capture-templates '(("m" "Review: Monthly Review" entry (file+olp+datetree "~/Dropbox/Org/reviews.org")
                                  (file "~/Dropbox/Org/templates/monthly_review.org")))))
    (progn
      (org-capture nil "m")
      (org-capture-finalize t)
      (org-speed-move-safe 'outline-up-heading)
      (org-narrow-to-subtree))))

   (bind-keys :prefix-map review-map
           :prefix "C-c r"
           ("d" . gn/daily-review)
           ("w" . gn/weekly-review)
           ("m" . gn/monthly-review))
   #+end_src
** Org faces and styling
   #+BEGIN_SRC emacs-lisp
   (setq org-hide-leading-stars t)

   ;; Org bullets for prettier org files
   (use-package org-bullets
     :commands org-bullets-mode
     :init
     (add-hook 'org-mode-hook 'org-bullets-mode)
     (setq org-bullets-bullet-list '("•" "►" "•" "►" "•")))

   ;; enable indent mode
   (setq org-indent-mode t)
   (setq org-fontify-whole-heading-line t)
   (setq org-fontify-quote-and-verse-blocks t)

   (setq org-fontify-done-headline t)
   (custom-set-faces
    '(org-block-begin-line
      ((t ( :foreground "#eeeeee"   :background "#56595e"))))
    '(org-block
      ((t ( :foreground "#d3d3d3" :background "#303236"))))
    '(org-block-end-line
      ((t ( :foreground "#eeeeee"   :background "#56595e"))))
    '(org-done
      ((t (:foreground "PaleGreen"))))
    '(org-headline-done
      ((t (:foreground "olive drab")))))
   #+end_src
** Agenda commands
    Pulled some ideas from https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
    Some of these have been yanked from [[http://bnbeckwith.com/bnb-emacs/][bnb-emacs]]

   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun gn/org-skip-subtree-if-priority (priority)
   "Skip an agenda subtree if it has a priority of PRIORITY.

   PRIORITY may be one of the characters ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
        subtree-end
      nil)))

   (defun gn/org-agenda-with-tip (arg)
     (org-agenda-list arg)
     (let ((inhibit-read-only t)
        (pos (point)))
     (goto-char (point-max))
     (goto-char pos)))

   ;; Reset everything to nil
   (setq org-agenda-custom-commands nil)

   (add-to-list 'org-agenda-custom-commands
             '("b" "Agenda" gn/org-agenda-with-tip))

   (add-to-list 'org-agenda-custom-commands
        '("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")
                (org-tags-match-list-sublevels t))))

   ;; Taken from doc.norang.ca/org-mode.html
   (add-to-list 'org-agenda-custom-commands
        '(" " "Agenda"
               ((agenda "" nil)
                (tags-todo "-CANCELLED/!NEXT"
                           ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                  (if gn/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'gn/skip-projects-and-habits-and-single-tasks)
                            (org-tags-match-list-sublevels t)
                            (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(todo-state-down effort-up category-keep))))
                (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
                (tags-todo "-CANCELLED/!"
                           ((org-agenda-overriding-header "Stuck Projects")
                            (org-agenda-skip-function 'gn/skip-non-stuck-projects)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-HOLD-CANCELLED/!"
                           ((org-agenda-overriding-header "Projects")
                            (org-agenda-skip-function 'gn/skip-non-projects)
                            (org-tags-match-list-sublevels 'indented)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                  (if gn/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'gn/skip-non-project-tasks)
                            (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                  (if gn/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'gn/skip-project-tasks)
                            (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-CANCELLED+WAITING|HOLD/!"
                           ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                  (if gn/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'gn/skip-non-tasks)
                            (org-tags-match-list-sublevels nil)
                            (org-agenda-todo-ignore-scheduled gn/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines gn/hide-scheduled-and-waiting-next-tasks)))
                (tags "-REFILE/"
                      ((org-agenda-overriding-header "Tasks to Archive")
                       (org-agenda-skip-function 'gn/skip-non-archivable-tasks)
                       (org-tags-match-list-sublevels nil))))
               nil))

   (add-to-list 'org-agenda-custom-commands
        '("1" "Clients"
             ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))
             (agenda "")
             (tags-todo "client"
               ((org-agenda-skip-function
                '(or (gn/org-skip-subtree-if-priority ?A)
                 (org-agenda-skip-if nil '(scheduled deadline)))))))))

   (add-to-list 'org-agenda-custom-commands
        '("c" "Simple agenda view"
             ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))
             (agenda "")
             (alltodo ""
               ((org-agenda-skip-function
                '(or (gn/org-skip-subtree-if-priority ?A)
                 (org-agenda-skip-if nil '(scheduled deadline)))))))))

   (add-to-list 'org-agenda-custom-commands
             '("2" . "COLLECT...") t)

   (add-to-list 'org-agenda-custom-commands
             '("2b" "CollectBox"
               ((alltodo ""))))

   (add-to-list 'org-agenda-custom-commands
             '("f" . "FOCUS...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rad" "All Tasks (grouped by Due Date)"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+1d>\""
                           ((org-agenda-overriding-header "DUE TOMORROW")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+28d>\""
                           ((org-agenda-overriding-header "DUE LATER")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "TODO={WAIT}"
                           ((org-agenda-overriding-header "WAITING FOR")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                (todo ""
                      ((org-agenda-overriding-header "WAITING FOR")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'deadline)))))
               ((org-agenda-sorting-strategy '(priority-down))
                (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
               "~/Dropbox/Org/all-tasks-by-due-date.pdf") t)

   (add-to-list 'org-agenda-custom-commands
             `("f." "Today"
               ((agenda ""
                        ((org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-overriding-header
                          (concat "CALENDAR Today: "
                                  (format-time-string "%a %d" (current-time))))
                         (org-agenda-span 'day)))
                (tags-todo "LEVEL=1+REFILE"
                           ((org-agenda-overriding-header "COLLECTBOX (Unscheduled)")))
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notedeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-qagenda-skip-function
                             '(org-agenda-skip-entry-if 'notedeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (agenda ""
                        ((org-agenda-entry-types '(:scheduled))
                         (org-agenda-overriding-header "SCHEDULED")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'todo 'done))
                         (org-agenda-sorting-strategy
                          '(priority-down time-down))
                         (org-agenda-span 'day)
                         (org-agenda-start-on-weekday nil)
                         (org-agenda-time-grid nil)))
                (todo "DONE"
                      ((org-agenda-overriding-header "COMPLETED"))))
               ((org-agenda-format-date "")
                (org-agenda-start-with-clockreport-mode nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("fh" "Hotlist"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")))
                (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                           ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                           ((org-agenda-overriding-header "FLAGGED"))))
               ((org-agenda-todo-ignore-scheduled 'future)))  t)

   (add-to-list 'org-agenda-custom-commands
             '("r" . "REVIEW...") t)

   (add-to-list 'org-agenda-custom-commands
             '("ra" . "All Tasks...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rt" . "Timesheet...") t)
   ;; Show what happened today.
   (add-to-list 'org-agenda-custom-commands
             '("rtd" "Daily Timesheet"
               ((agenda ""))
               ((org-agenda-log-mode-items '(clock closed))
                (org-agenda-overriding-header "DAILY TIMESHEET")
                (org-agenda-show-log 'clockcheck)
                (org-agenda-span 'day)
                (org-agenda-start-with-clockreport-mode t)
                (org-agenda-time-grid nil))) t)

   ;; Show what happened this week.
   (add-to-list 'org-agenda-custom-commands
             '("rtw" "Weekly Timesheet"
               ((agenda ""))
               (
                ;; (org-agenda-format-date "")
                (org-agenda-overriding-header "WEEKLY TIMESHEET")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                (org-agenda-span 'week)
                (org-agenda-start-on-weekday 1)
                (org-agenda-start-with-clockreport-mode t)
                (org-agenda-time-grid nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("rc" . "Calendar...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rc7" "Events and appointments for 7 days"
               ((agenda ""))
               ((org-agenda-entry-types '(:timestamp :sexp))
                ;; (org-agenda-overriding-header "Calendar for 7 days")
                (org-agenda-span 'week)
                (org-agenda-format-date "\n%a %d")
                ;; (org-agenda-date-weekend ... new face ...)
                (org-agenda-time-grid nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("rw" "Weekly review"
               ((tags "CATEGORY={@REFILE}&LEVEL<=2"
                      ((org-agenda-overriding-header "NEW TASKS")))
                (agenda ""
                        ((org-agenda-clockreport-mode t)
                         (org-agenda-format-date
                          (concat "\n"
                                  "%Y-%m-%d" " %a "
                                  (make-string (window-width) ?_)))
                         (org-agenda-overriding-header "PAST WEEK")
                         (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                         (org-agenda-show-log 'clockcheck)
                         (org-agenda-span 7)
                         (org-agenda-start-day "-1w")
                         (org-deadline-warning-days 0)))
                (agenda ""
                        ((org-agenda-overriding-header "NEXT MONTH")
                         (org-agenda-span 'month)
                         (org-agenda-start-day "+0d")
                         (org-deadline-warning-days 0)))
                (todo "PROJECT"
                      ((org-agenda-overriding-header "PROJECT LIST")))
                (todo "DONE|PROJECTDONE"
                      ((org-agenda-overriding-header
                        "Candidates to be archived"))))))

   #+end_src

   Org-Super-Agenda commands

   #+BEGIN_SRC emacs-lisp
   (use-package org-super-agenda
     :ensure t
     :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
     :config
     (org-super-agenda-mode t)
     (add-to-list 'org-agenda-custom-commands
               '("rag" "Grouped Tasks"
                 ((todo "" ((org-super-agenda-groups
                             '((:name "All Tasks" :auto-category t)))))))))
   #+end_src

** Org Pomodoro
   #+BEGIN_SRC emacs-lisp
    (use-package org-pomodoro
      :after org-agenda
      :custom
        (org-pomodoro-ask-upon-killing t)
        (org-pomodoro-format "%s")  ;;     
        (org-pomodoro-short-break-format "%s")
        (org-pomodoro-long-break-format  "%s")
      :custom-face
        (org-pomodoro-mode-line ((t (:foreground "#ff5555"))))
        (org-pomodoro-mode-line-break   ((t (:foreground "#50fa7b"))))
      :hook
        (org-pomodoro-started . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Let's focus for 25 minutes!")))
        (org-pomodoro-finished . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Well done! Take a break.")))

      :bind (:map org-agenda-mode-map
      ("p" . org-pomodoro)))
   #+end_src

** Org-protocol
   #+BEGIN_SRC emacs-lisp
   (server-start)
   (require 'org-protocol)
   #+end_src

** Org Brain
   I'm trying out Org-brain for ZettelKasten.  I'm not sure if this will stick or if I'll use note cards.
   Invocation taken from [[https://github.com/Kungsgeten/org-brain][https://github.com/Kungsgeten/org-brain]]

   #+BEGIN_SRC emacs-lisp
   (use-package org-brain
     :init
     (setq org-brain-path "~/Dropbox/Org")
     :config
     (setq org-id-track-globally t)
     (setq org-id-locations-file "~/Dropbox/Org/.org-id-locations")
;;     (push '("b" "Brain" plain (function org-brain-goto-end)
;;          "* %i%?" :empty-lines 1)
;;        org-capture-templates)
     (setq org-brain-visualize-default-choices 'all)
     (setq org-brain-title-max-length 12)
     (setq org-brain-include-file-entries nil
        org-brain-file-entries-use-title nil))
   #+end_src

* iBuffer-mode

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("Python"
                (mode . python-mode))
            ("HTML"
                (mode . web-mode))
            ("JS"
                (mode . js-mode))
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Lisp"
                (mode . emacs-lisp-mode)
                )))))

   ;; don't show empty groups
   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Add full path to buffer title
   (setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

* Reverting buffers
   Very useful if dealing with git repos and also files that can change from Dropbox

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

* Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

* Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

* Passwords
  The "pass" program, aka "password-store", is a password manager that
  uses GPG and standand UNIX tools to handle passwords. Encrypted
  files are stored in a plain directory structure. Very simple, very
  nice: now all data is available with a variety of interfaces, such
  as standard CLI, a dmenu interface, a graphical front-end like
  qtpass, etc. Install it on Void Linux with xbps-install -S pass.
  The package below provides an Emacs interface to some of the most
  common actions, in the form of a list of candidates that can be
  narrowed down (such as with Ido). I use it to quickly store a
  password to the kill ring.

   #+BEGIN_SRC emacs-lisp
   (use-package password-store
     :ensure t
     :commands (password-store-copy
             password-store-edit
             password-store-insert)
     :custom
       (password-store-time-before-clipboard-restore 30))
   #+end_src

   And this one adds a major mode for browsing the pass keychain. Call
   it with M-x pass. There is a helpful section at the top with key
   bindings and their functions.

   #+BEGIN_SRC emacs-lisp
   (use-package pass
     :ensure t)
   #+end_src
* Python
  This seems to be an evolving config for Python.  I've tried a few variations of lsp-python-ms
  without much stability.
** Path from shell
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t)

   ;; Configure where TAGS are stored
   (setq tags-table-list (list "~/.emacs.d/TAGS"))
   #+end_src
** Projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t)
   #+end_src
** Pyenv
   #+BEGIN_SRC emacs-lisp
   (use-package pyenv-mode-auto
     :ensure t)

   (defun pyenv-activate-current-project ()
     "Automatically activates pyenv version if .python-version file exists."
     (interactive)
     (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
     (if python-version-directory
        (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
               (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
          (pyenv-mode-set pyenv-current-version)
          (message (concat "Setting virtualenv to " pyenv-current-version))))))

   (defvar pyenv-current-version nil nil)

   (defun pyenv-init()
   "Initialize pyenv's current version to the global one."
   (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
    (message (concat "Setting pyenv version to " global-pyenv))
    (pyenv-mode-set global-pyenv)
    (setq pyenv-current-version global-pyenv)))

   (add-hook 'after-init-hook 'pyenv-init)

   (use-package pyenv-mode
     :init
     (add-to-list 'exec-path "~/.pyenv/shims")
     (setenv "WORKON_HOME" "~/.pyenv/versions/")
     :config
     (pyenv-mode)
     :bind
     ("C-c p" . pyenv-activate-current-project))

   ;; Fixes an issue where pyenv conflicts with org-mode
   (eval-after-load 'pyenv-mode
     '(progn
      (define-key pyenv-mode-map (kbd "C-c C-s") nil)))
   #+end_src
** YASnippet
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t)
   #+end_src
** Flycheck
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :config
     (setq flycheck-flake8rc "~/.config/flake8")
     (setq flycheck-python-flake8-executable "~/.pyenv/versions/emacs/bin/flake8")
     :init (global-flycheck-mode))

   (add-hook 'python-mode-hook 'flycheck-mode)
   #+end_src
** LSP and Company
   Configure the LSP server and UI
   Taken from https://github.com/xhcoding/ms-python
   #+BEGIN_SRC emacs-lisp
   (use-package lsp-mode
     :ensure t)

   (use-package lsp-ui
     :ensure t
     :commands lsp-ui-mode
     :custom
       (lsp-ui-doc-enable nil)
       (lsp-ui-doc-position 'at-point)
       (lsp-ui-doc-use-childframe t)
       (lsp-ui-doc-use-webkit t)
       (lsp-ui-sideline-enable nil)
       ;; flycheck
       (lsp-ui-flycheck-enable t)
       ;; lsp-ui-imenu
       (lsp-ui-imenu-enable t)
       (lsp-ui-imenu-kind-position 'top) ;; top, bottom, or at-point
     :bind
       (:map lsp-mode-map
       ("C-c C-r" . lsp-ui-peek-find-references)
       ("C-c C-j" . lsp-ui-peek-find-definitions)
       ("C-c i"   . lsp-ui-peek-find-implementation)
       ("C-c m"   . lsp-ui-imenu)
       ("C-c s"   . lsp-ui-sideline-mode)
       ("C-c d"   . ladicle/toggle-lsp-ui-doc))
     :config
       (add-hook 'lsp-ui-mode-hook #'(lambda() (setq-local flycheck-checker 'python-flake8))))

   (use-package company
     :ensure t
     :config
     (setq company-minimum-prefix-length 1
            company-idle-delay 0
            company-tooltip-limit 10
            company-transformers nil
            company-show-numbers t)
     (global-company-mode +1))

   (use-package company-lsp
     :ensure t
     :after company
     :config
     (setq company-lsp-enable-snippet nil)
     :init (add-to-list 'company-backends 'company-lsp))

   (use-package company-box
     :ensure t
     :hook (company-mode . company-box-mode))

   (use-package ms-python
     :config
     (add-hook 'python-mode-hook #'lsp))
   #+end_src
* JSON

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package json-mode
     :defer t)
   #+end_src
* Web Mode
   #+BEGIN_SRC emacs-lisp
   (use-package web-mode
     :mode
       ("\\.html$" . web-mode)
       ("\\.js$" . web-mode)
     :init
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-enable-auto-pairing t)
       (setq web-mode-enable-auto-expanding t)
       (setq web-mode-enable-css-colorization t))
   #+end_src

* Javascript
  #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
  :ensure t
  :init
  (setq js-basic-indent 2)
  (setq-default js2-basic-indent 2
                js2-basic-offset 2
                js2-auto-indent-p t
                js2-cleanup-whitespace t
                js2-enter-indents-newline t
                js2-indent-on-enter-key t
                js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))

  (add-hook 'js2-mode-hook
            (lambda ()
              (push '("function" . ?ƒ) prettify-symbols-alist)))

  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
  #+end_src
* Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package markdown-mode
     :commands (markdown-mode gfm-mode)
     :mode ("\\.md\\'"
            "\\.mkd\\'"
            "\\.markdown\\'")
     :init
     (setq mardown-command "multimarkdown"))
   #+end_src

* Deft
  #+BEGIN_SRC emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands (deft)
    :config
      (setq deft-directory "~/Dropbox/Org"
        deft-extensions '("org" "txt" "md"))
      (setq deft-default-extension "org")
      (setq deft-use-filename-as-title nil)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-file-naming-rules
      '((noslash . "_")
        (nospace . "_")
        (case-fn . downcase)))
   )
  #+end_src

* Ivy, Swiper and Counsel
   I went from IDO to Helm and now going for a more minimalist
   lightweight solution in Ivy.
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish ivy-mode
     :config
     (ivy-mode 1))

   ;(ivy-mode 1)
   ;(setq ivy-use-virtual-buffers t)
   ;(setq ivy-count-format "(%d/%d) ")
   ;; Ivy-based interface to standard commands
   (global-set-key (kbd "C-s") 'swiper)
   ; (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   ;; Ivy-based interface to shell and system tools
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   ;(use-package ivy-rich
   ;  :ensure t
   ;  :after (ivy)
   ;  :init
   ;  (setq ivy-rich-path-style 'abbrev
   ;     ivy-virtual-abbreviate 'full)
   ;  :config (ivy-rich-mode 1))
   #+end_src

* iMenu
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
  :ensure t
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
  #+end_src

* Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src

* Highlight TODOs
   #+BEGIN_SRC emacs-lisp
   (use-package hl-todo
     :config
     ;; Adding a new keyword: TEST.
     (add-to-list 'hl-todo-keyword-faces '("TODO" . "gold"))
     (add-to-list 'hl-todo-keyword-faces '("Fixme" . "orange"))
     :init
     (add-hook 'python-mode-hook (lambda () (hl-todo-mode t)))
     )

   (use-package magit-todos
     :after magit
     :after hl-todo
     :config
     (magit-todos-mode))
   #+end_src

* Terraform
  #+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :mode "\\.tf$"
    :config (setq terraform-indent-level 2)
    :hook
      (terraform-mode . company-mode))
  #+end_src

* Eyebrowse
  For saving window configs because I bounce around from project to
  project and org files a lot it's handy to save configs of windows
  instead of changing them constantly.

  #+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
  :diminish eyebrowse-mode
  :config (progn
    (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t)))
  #+end_src


  End of configs

* Highlight Indentation
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :diminish
    :functions (ivy-cleanup-string
                my-ivy-cleanup-indentation)
    :commands highlight-indent-guides--highlighter-default
    :functions my-indent-guides-for-all-but-first-column
    :hook (prog-mode . highlight-indent-guides-mode)
    :init (setq highlight-indent-guides-method 'character
                highlight-indent-guides-responsive 'top)
    :config
    ;; Don't display indentations while editing with `company'
    (with-eval-after-load 'company
      (add-hook 'company-completion-started-hook
                (lambda (&rest _)
                  "Trun off indentation highlighting."
                  (when highlight-indent-guides-mode
                    (highlight-indent-guides-mode -1))))
      (add-hook 'company-after-completion-hook
                (lambda (&rest _)
                  "Turn on indentation highlighting."
                  (when (and (derived-mode-p 'prog-mode)
                             (not highlight-indent-guides-mode))
                    (highlight-indent-guides-mode 1)))))

    ;; Don't display first level of indentation
    (defun my-indent-guides-for-all-but-first-column (level responsive display)
      (unless (< level 1)
        (highlight-indent-guides--highlighter-default level responsive display)))
    (setq highlight-indent-guides-highlighter-function
          #'my-indent-guides-for-all-but-first-column)

    ;; Don't display indentations in `swiper'
    ;; https://github.com/DarthFennec/highlight-indent-guides/issues/40
    (with-eval-after-load 'ivy
      (defun my-ivy-cleanup-indentation (str)
        "Clean up indentation highlighting in ivy minibuffer."
        (let ((pos 0)
              (next 0)
              (limit (length str))
              (prop 'highlight-indent-guides-prop))
          (while (and pos next)
            (setq next (text-property-not-all pos limit prop nil str))
            (when next
              (setq pos (text-property-any next limit prop nil str))
              (ignore-errors
                (remove-text-properties next pos '(display nil face nil) str))))))
      (advice-add #'ivy-cleanup-string :after #'my-ivy-cleanup-indentation)))
   #+end_src
