#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs for emacs for daily use with Python and Orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git python javascript react css html
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate programming using Org-mode for a documented configuration.

  If you’re viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and
  typing ` C-c ’ ` (org-edit-special). This opens another buffer in emacs-lisp-mode, so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function, and then call it.

* Packages
   I use `use-package` and Straight so that all packages are automatically installed if cloning this repo for another machine.

   #+BEGIN_COMMENT emacs-lisp
     ;; Boostrap Straight for package management
     (setq straight-repository-branch "develop") ;; temporary work around for errors compiling https://github.com/radian-software/straight.el/pull/1054
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 6))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (straight-use-package 'org)

     (straight-use-package 'use-package)
     (setq straight-use-package-by-default t)

     ;; Disable package.el in favor of straight.el
     (setq package-enable-at-startup nil)

     ;; Install use-package
     (straight-use-package 'use-package)
   #+END_SRC

   #+RESULTS:

* Theme
   My current configuration uses doom-theme, specifically doom-dracula (everywhere!) and some default settings.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config)
       (load-theme 'doom-dracula t))
   #+end_src

* Windows Configuration
  Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.
  Also set `C-z` and `C-x C-z` to nil.  `C-z` minimizes/hides emacs and it's enfuriating when I accidently hit that key combo.

  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :init
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (tooltip-mode -1)
      :config
      (setq inhibit-splash-screen t)
      :bind (("C-z" . nil)
             ("C-x C-z" . nil)))
  #+end_src

* Font handling
  For a more asthetically pleasing experience I'm changing how I use fonts in emacs.  For buffers related to code I want Fira Code and for writing qin org-mode buffers I want Avenir.  The following functions allow me to change based on the detected modes.

  #+BEGIN_SRC emacs-lisp
    ;; TODO: Add code to change font size based on which monitor I'm using.

    ;; Use variable width font faces in buffer
    (defun my-buffer-face-mode-variable ()
      "Set font to a variable width (proportional) fonts in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Avenir" :height 140 :width semi-condensed))
      (buffer-face-mode))
    ;; Use monospaced font faces in buffer
    (defun my-buffer-face-mode-fixed ()
      "Sets a fixed width (monospace) font in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Fira Code" :height 140))
      (buffer-face-mode))
    
    ;; Set default font faces for Info and ERC modes
    (add-hook 'org-mode-hook 'my-buffer-face-mode-variable)
    (add-hook 'python-mode-hook  'my-buffer-face-mode-fixed)
    (add-hook 'rjsx-mode 'my-buffer-face-mode-fixed)

    (use-package emojify
      :hook (after-init . global-emojify-mode))
  #+end_src

* One liners preferences
  Small settings and packages that really don't have a place anywhere else in this document that warrants it's own section heading for each one.
  These are important in how I like my emacs to perform.

  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-frame-font "Fira Code Medium 14")
    (setq user-full-name "Greg Newman"
          user-mail-address "greg@gregnewman.org")
    (setq-default indent-tabs-mode nil)
    (setq ring-bell-function (lambda ()))
    (setq confirm-kill-emacs 'yes-or-no-p)
    (setq require-final-newline t)
    (setq-default line-spacing 0.25)
    (setq explicit-shell-file-name "/bin/zsh")
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t)
    (setq kept-new-versions 10)
    (setq kept-old-versions 10)
    (setq version-control t)
    (global-display-line-numbers-mode)
    (setq-default display-line-numbers-width 3)
    (setq-default display-fill-column-indicator-column 80)
    ;; always show paren highlights
    (show-paren-mode 1)
    ; highlight current line
    (global-hl-line-mode 1)
    ;; javascript indents.  This can probably be removed once I settle on a "good" js config
    (setq js-indent-level 2)
    ; Desktop setup.
    (desktop-save-mode 1)
    (setq desktop-dirname "~/.emacs.d/desktops/")
    (setq desktop-base-file-name (concat ".desktop." (system-name)))
    (setq desktop-path (list desktop-dirname))
    (setq desktop-base-lock-name "lock")
    (setq desktop-load-locked-desktop t)
    ; Very useful if dealing with git repos and also files that can change from Dropbox
    (global-auto-revert-mode t)
    ;; Configure where TAGS are stored
    (setq tags-table-list (list "~/.emacs.d/TAGS"))
   #+end_src

* Icons, Git Gutter and Recent files
   #+BEGIN_SRC emacs-lisp
     ;; icons
     (use-package all-the-icons)

     ;; ;; Git Gutter
     (use-package git-gutter
       :diminish git-gutter-mode
       :config (global-git-gutter-mode)
       :init
       (progn
         (setq git-gutter:separator-sign " "
               git-gutter:lighter " GG"))
       :config
       (progn
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:added "#546E00"))
       :bind (("C-x p" . git-gutter:previous-hunk)
              ("C-x n" . git-gutter:next-hunk)
              ("C-x v =" . git-gutter:popup-hunk)
              ("C-x v r" . git-gutter:revert-hunk)))

     ;; Recent files
     (setq recentf-save-file (concat user-emacs-directory "recentf")
           recentf-max-saved-items 200
           recentf-max-menu-items 15)
     (recentf-mode t)
   #+end_src

* Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp
     (save-place-mode +1)
     (setq-default save-place t)
   #+end_src

* Custom function to move to beginning of line
     Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

   #+BEGIN_SRC emacs-lisp
     (defun my/smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

        Move point to the first non-whitespace character on this line.
        If point is already there, move to the beginning of the line.
        Effectively toggle between the first non-whitespace character and
        the beginning of the line.

        If ARG is not nil or 1, move forward ARG - 1 lines first.  If
        point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

       ;; remap C-a to `smarter-move-beginning-of-line'
       (global-set-key [remap move-beginning-of-line]
                       'my/smarter-move-beginning-of-line)
   #+end_src
* Which-key
  I forget bindings for modes I don't use regularly. Which-key provides nice reminders.

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
      which-key-side-window-max-width 0.33
      which-key-idle-delay 0.5)
    :diminish which-key-mode)

  (provide 'init-which-key)
  #+end_src

* TODO iBuffer (clean this up)
  I use ibuffer a lot for switching between buffers from a list of available open buffers.
  These settings help to organize that list.

   #+Begin_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (autoload 'ibuffer "ibuffer" "List buffers." t)

     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("Python"
                     (mode . python-mode))
                    ;; ("HTML"
                    ;; (mode . web-mode))
                    ;; ("JS"
                    ;; (or (mode . js2-mode)
                    ;;     (filename . ".js")))
                    ("TXT"
                     (mode . text-mode))
                    ("YAML"
                     (filename . "yaml"))
                    ("Org" ;; all org-related buffers
                     (mode . org-mode))
                    ("Lisp"
                     (mode . emacs-lisp-mode))))))

     ;; don't show empty groups
     (setq ibuffer-show-empty-filter-groups nil)

     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-switch-to-saved-filter-groups "default")))

     ;; Add full path to buffer title
     (setq frame-title-format
           (list (format "%s %%S: %%j " (system-name))
                 '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

* Hydra
   #+BEGIN_SRC  emacs-lisp
     (use-package hydra)

     (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("g" text-scale-increase "in")
       ("l" text-scale-decrease "out"))
   #+end_src

* Path from shell
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))
   #+end_src

* Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :bind-keymap
       ("C-c p" . projectile-command-map))
   #+end_src
* Pyenv
   #+BEGIN_SRC emacs-lisp
     (use-package pyenv-mode-auto)

     (defun pyenv-activate-current-project ()
       "Automatically activates pyenv version if .python-version file exists."
       (interactive)
       (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
       (if python-version-directory
          (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                 (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
            (pyenv-mode-set pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))

     (defvar pyenv-current-version nil nil)

     (defun pyenv-init()
     "Initialize pyenv's current version to the global one."
     (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
      (message (concat "Setting pyenv version to " global-pyenv))
      (pyenv-mode-set global-pyenv)
      (setq pyenv-current-version global-pyenv)))

     (add-hook 'after-init-hook 'pyenv-init)

     (use-package pyenv-mode)

     ;; Fixes an issue where pyenv conflicts with org-mode
     (eval-after-load 'pyenv-mode
       '(progn
        (define-key pyenv-mode-map (kbd "C-c C-s") nil)))

     (add-hook 'python-mode-hook #'display-fill-column-indicator-mode)
   #+end_src

* Org-mode
  [[https://gettingthingsdone.com/][Getting Things Done]] (GTD), is a grouping of productivity processes following five basic principles.
  
  * Capture - Everything in your mind needs to be captured because your mind is "a horrible office".  This is typically the inbox.org file in my setup but is also done in analog notebooks, email and voice memos.
  * Clarify - Every task that doesn't take two minutes to do should be broken down into actionable tasks that simplify the larger scope of the project.
  * Organize - All projects and next actions are organized into areas, assigned due dates if needed, prioritized and effort estimates added to them.  If the tasks/projects are not something to do right now they are still organized for later consumption.  Anything that needs to be on the calendar should be added but keep the calendar sacred.  Calendars should only be for appointments or hard-carved blocks of time.
  * Reviews - Reviews should be handled on a regular basis.  I do a daily review of what should be the priorities for the day but I also do weekly and monthly reviews to keep my systems from getting stale and/or stuck.
  * Engage - Choose the next action and get to work.

  As a software craftsman I spend my days in Emacs. [[https://orgmode.org/][Orgmode]] is a perfect solution for keeping me honest with my system(s) and having it ready at a keystroke.  My files are plain text files with the .org extenstion and synced between my laptops and mobile devices using Dropbox.

  My org file structure is as follows:
  * gtd.org - Where my personal areas live. Personal, Finance, House, Cars, Wife, Dog, etc.
  * books.org - A record of the books I read and related notes.
  * classical_guitar.org - This file tracks my course work for the classical guitar school and my studies.
  * computer.org - Notes related to my Linux setup and the programming languages I use.
  * daybook.org - A living notebook that I append to during the day with notes about projects or KI's
  * learning.org - any courses I take, typically CS related live here.
  * reviews.org - I use templates to guide the daily, weekly and monthly reviews.  The results of those are in this file.
  * studio.org - All tasks and notes regarding my art studio, projects and client commissions.
  * Each software related client gets a file of their own where I track time, tasks and notes.  Each file is named after the client.
** TODO fix indents in orgmode under headings
** Configuration
   This will be a expanding collection of org customization.  I live in text files throughout my days and orgmode gives me a nice interface for collecting notes.
   I use org from the git repo to stay up to date with fixes and new features.  I can probably move this to be installed via Straight but for now this works fine.

   #+BEGIN_SRC emacs-lisp
     (setq org-modules '(org-protocol))
     (eval-after-load 'org
       '(org-load-modules-maybe t))

     ;; respects splits
     (setq org-agenda-window-setup 'current-window)

     ;; agenda files
     (setq org-agenda-files (list "~/Dropbox/Org/"))

     ;; Start the weekly agenda on Monday
     (setq org-agenda-start-on-weekday 1)

     ;; Display tags farther right
     (setq org-agenda-tags-column -102)
     (setq org-agenda-span 7)
     (setq org-tags-column 150)
     (setq org-agenda-sticky nil)
     (setq org-agenda-inhibit-startup t)
     (setq org-agenda-use-tag-inheritance t)
     (setq org-agenda-show-log t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
     (setq org-columns-default-format "%14SCHEDULED %Effort{:} %CLOCKSUM_T{:} %1PRIORITY %TODO %50ITEM %TAGS")

     ;; The following lines are always needed.  Choose your own keys.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)

     ;; enable line breaks
     (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

     ;; Don't allow parent to be marked done unless children are done
     (setq org-enforce-todo-dependencies t)
     (setq org-enforce-todo-checkbox-dependencies t)

     (setq org-fontify-done-headline t)
     (setq org-startup-folded t)
     (setq org-src-fontify-natively nil)

     ;; Refiling
     (setq org-refile-targets '((org-agenda-files :maxlevel . 5)))
     (setq org-refile-allow-creating-parent-nodes 'confirm)

     ;; Visual Line Mode
     (add-hook 'org-mode-hook 'visual-line-mode)

     ;; Line numbers
     ;; TODO fix this in 29 it doesn't work
     (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))

     (defun gn/orgmode-ignore-whitespace-mode ()
       (interactive)
       "turns off whitespace mode in org buffers"
       (whitespace-mode -1))
     ;; Set default font faces for Info and ERC modes
     ;; (add-hook 'org-mode-hook #'gn/orgmode-ignore-whitespace-mode)

     ;; Turn off whitespace-mode since my linters will handle them anyway and it's annoying
     (whitespace-mode -1)
   #+end_src

** Todo Keywords
    Setting up my todo keywords which are global and their relative colors.
   #+BEGIN_SRC emacs-lisp
     ;; Keywords
     (setq org-todo-keywords
       (quote ((sequence "NEXT(n)" "TODO(t)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

     ;; Anytime a task is marked done the line states `CLOSED: [timestamp]
     (setq org-log-done 'time)

     (setq org-todo-keyword-faces
       (quote (("TODO" :foreground "lime green" :weight bold)
               ("NEXT" :foreground "cyan" :weight bold)
               ("DONE" :foreground "dim gray" :weight bold)
               ("WAITING" :foreground "tomato" :weight bold)
               ("HOLD" :foreground "magenta" :weight bold)
               ("CANCELLED" :foreground "dim gray" :weight bold))))
   #+end_src
** Capture mode keybinding
   I use C-c c to start capture mode
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c c") 'org-capture)
   #+end_src
** Capture templates
    Capture template are critical for keeping focused on the current work and not getting sent down the proverbial rabbit hole.  It's also handy for knowledge investements while working.  For instance, a method in a python library I need to understand more deeply, I can trigger the capture template for Knowledge Investments with `C=c c k`, add some context and with `C=c C=c` close and save the capture without leaving my position in the file.  The link to where I found the method is captured in the template and I can visit that later in the day when I have time to dive deep.

    For my reference the syntax is as follows
    #+BEGIN_EXAMPLE
    ("t" "Todo" entry (file "~/Dropbox/Org/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-keep t)
    #+end_example

    `t` is the trigger key for Todo.
    Todo entry is layman's term for the capture followed by what file to store it in.
    The instruction regex starts with the tag or keyword then [[https://orgmode.org/manual/Template-expansion.html#Template-expansion][template expansions]].
       - %? Position the cursor where I was
       - %u, %U Inactive timestamp
       - %a annotation, normally the link created with org-store-link
       - :clock-keep keeps the clock running if I'm clocking a task

   #+BEGIN_SRC emacs-lisp
     ;; Capture templates
     (setq org-indent-indentation-per-level 2)
     (setq org-capture-templates
         (quote (("t" "Todo" entry (file "~/Dropbox/Org/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-keep t)
                 ("k" "Knowledge Investment" entry (file "~/Dropbox/Org/inbox.org")
                  "* %? :KI:\n%U\n%a\n" :clock-keep t)
                 ("n" "Note" entry (file "~/Dropbox/Org/inbox.org")
                  "* %? :NOTE:\n%U\n%a\n" :clock-keep t)
                 ("d" "Daybook" entry (file+olp+datetree "~/Dropbox/Org/daybook.org")
                  "* %?" :clock-keep t)
                 ("m" "Meeting" entry (file "~/Dropbox/Org/inbox.org")
                  "* Meeting with %? :MEETING:\n%U" :clock-keep t)
                 ("p" "Phone call" entry (file "~/Dropbox/Org/inbox.org")
                  "* PHONE %? :PHONE:\n%U" :clock-keep t))))
   #+end_src
** Org bullets and misc settings
   Using org buillets and hiding leading stars.  I'm also fontifying headings, quotes and done headlines.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :commands org-bullets-mode
       :init
       (add-hook 'org-mode-hook 'org-bullets-mode))
       (progn
        (require 'org-indent)
        (org-indent-mode t))
     (setq org-hide-leading-stars t)
     (setq org-fontify-whole-heading-line t)
     (setq org-fontify-quote-and-verse-blocks t)
     (setq org-fontify-done-headline t)

     (use-package org-download)
     (setq-default org-download-image-dir "~/Dropbox/Org/img")

     (use-package org-fancy-priorities
       :ensure t
       :hook
       (org-mode . org-fancy-priorities-mode)
       :config
       (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))

   #+end_src
* Vertico, Marginalia, Savehist, Orderless
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle' globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init configuration is always executed (Not lazy!)
    :init

    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

* Company

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (setq company-minimum-prefix-length 1
             company-idle-delay 0
             company-tooltip-limit 10
             company-transformers nil
             company-show-numbers t)
       (global-company-mode +1))

     ; (use-package company-lsp
     ;  :after company
     ;  :config
     ;  (setq company-lsp-enable-snippet nil)
     ;  :init (add-to-list 'company-backends 'company-capf))

     (use-package company-box
       :hook (company-mode . company-box-mode))
   #+end_src

* Magit
  #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind ("C-x g" . magit-status))

     (use-package magit-todos
       :after magit
       :after hl-todo
       :config
       (setq magit-todos-depth 2)
       (setq magit-todos-exclude-globs '("*.js.map"))
       (magit-todos-mode))

     (use-package hl-todo
       :config
       ;; Adding a new keyword: TEST.
       (add-to-list 'hl-todo-keyword-faces '("TODO" . "gold"))
       (add-to-list 'hl-todo-keyword-faces '("Fixme" . "orange"))
       :init
       (add-hook 'python-mode-hook (lambda () (hl-todo-mode t)))
       )
   #+end_src

* Highlight Indentation
   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indent-guides
       :diminish
       :commands highlight-indent-guides--highlighter-default
       :functions my-indent-guides-for-all-but-first-column
       :hook ((prog-mode vue-mode vue-html-mode vue-javascript-mode) . highlight-indent-guides-mode)
       :init (setq highlight-indent-guides-method 'character
                   highlight-indent-guides-responsive 'top)
       :config
       ;; Don't display indentations while editing with `company'
       (with-eval-after-load 'company
         (add-hook 'company-completion-started-hook
                   (lambda (&rest _)
                     "Turn off indentation highlighting."
                     (when highlight-indent-guides-mode
                       (highlight-indent-guides-mode -1))))
         (add-hook 'company-after-completion-hook
                   (lambda (&rest _)
                     "Turn on indentation highlighting."
                     (when (and (derived-mode-p 'prog-mode)
                                (not highlight-indent-guides-mode))
                       (highlight-indent-guides-mode 1))))))

       ;; Don't display first level of indentation
       (defun my-indent-guides-for-all-but-first-column (level responsive display)
         (unless (< level 1)
           (highlight-indent-guides--highlighter-default level responsive display)))
       (setq highlight-indent-guides-highlighter-function
             #'my-indent-guides-for-all-but-first-column)
   #+end_src
