#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs for emacs and orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate
  programming using Org-mode for a much cleaner and readable configuration.

  If you are borrowing or using pieces of this config you can copy pieces of it
  into a scratch file and run `M-x eval-buffer` to try them out.

  If you’re viewing the Org file, you can open source code blocks (those are the
  ones in begin_src) in a separate buffer by moving your point inside them and
  typing C-c ’ (org-edit-special). This opens another buffer in emacs-lisp-mode,
  so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function,
  and then call it.
* Packages
   Use `use-package` so that all packages are automatically installed if cloning
   this repo for another machine.

   [[https://github.com/quelpa/quelpa][Quelpa]] grabs and builds packages from source (e.g. Github).

   Along with the quelpa package, quelpa-use-package adds a handler to
   use-package.

   #+BEGIN_SRC emacs-lisp
   (require 'package)
   (setq package-enable-at-startup nil)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
   (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
   (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
   (package-initialize)

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))

   (eval-when-compile
     (require 'use-package))

   (setq custom-file (make-temp-file "emacs-custom"))

   (use-package quelpa)
   (use-package quelpa-use-package :ensure t)

   ;; Handle the `use-package-always-ensure' setting
   (quelpa-use-package-activate-advice)
   #+END_SRC

* Theme
   Back to Zenburn with some modifications to face for orgmode
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package zenburn-theme
       :if (not window-system)
       :ensure t)
   #+end_src

* Windows Configuration
   Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.

   #+BEGIN_SRC emacs-lisp
   (when window-system
     (tooltip-mode -1)
     (tool-bar-mode -1)
     (menu-bar-mode 1)
     (scroll-bar-mode -1))
   #+end_src

* Basics and general settings
   Set default tabs to 4.  Highlight line.  There are a number of
   packages for highlighting the current line but hi-line is already
   included and works fine.  No more cruft than needed.
   Mark the column at 80 for python.

   #+BEGIN_SRC emacs-lisp
   ; Set user full name
   (setq user-full-name "Greg Newman"
         user-mail-address "greg@gregnewman.org")

   ; line numbers
   (global-display-line-numbers-mode)
   (setq-default display-line-numbers-width 3)

   ; no hate tabs
   (setq-default indent-tabs-mode nil)

   ; column numbers
   (setq column-number-mode  t)

   ; highlight current line
   (global-hl-line-mode 1)
   (set-face-background 'hl-line "gray15")

   ; default tab width
   (setq-default default-tab-width 4)

   ; show lines that are longer than 79 columns
   (use-package whitespace
     :init
     (dolist (hook '(prog-mode-hook text-mode-hook))
       (add-hook hook #'whitespace-mode))
     (add-hook 'before-save-hook #'whitespace-cleanup)
     :config
       (setq whitespace-global-modes '(not org-mode))
       (setq whitespace-line-column 80) ;; limit line length
       (setq whitespace-style '(face tabs empty trailing lines-tail)))

   ; dont friggin beep at me!
   (setq ring-bell-function (lambda ()))

   ; confirm when killing emacs.
   (when (window-system)
     (setq confirm-kill-emacs 'yes-or-no-p))

   ; only type y instead of yes
   (fset 'yes-or-no-p 'y-or-n-p)

   ; require a new line at the end of files
   (setq require-final-newline t)

   ; Desktop setup.
   (desktop-save-mode 1)
   (setq desktop-dirname "~/.emacs.d/desktops/")
   (setq desktop-base-file-name (concat ".desktop." (system-name)))
   (setq desktop-path (list desktop-dirname))
   (setq desktop-base-lock-name "lock")
   (setq desktop-load-locked-desktop t)

   ; Font
   (set-frame-font "Office Code Pro 10")

   ; Projectile
   (use-package projectile
     :bind-keymap
     ("C-c p" . projectile-command-map))

   ; Git Gutter
   (use-package git-gutter
     :ensure t
     :diminish git-gutter-mode
     :config (global-git-gutter-mode)
     :init
     (progn
       (setq git-gutter:separator-sign " "
           git-gutter:lighter " GG"))
     :config
       (progn
         (set-face-background 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-background 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-background 'git-gutter:added "#546E00")
         (set-face-foreground 'git-gutter:added "#546E00"))
     :bind (("C-x p" . git-gutter:previous-hunk)
       ("C-x n" . git-gutter:next-hunk)
       ("C-x v =" . git-gutter:popup-hunk)
       ("C-x v r" . git-gutter:revert-hunk)))

   ; Browse Dash documentation
   (use-package counsel-dash
     :config
     (setq counsel-dash-common-docsets '("Javascript" "Python_3")))

   ; Because i forget keyboard shortcuts
   (use-package guide-key
     :defer t
     :diminish guide-key-mode
     :config
     (progn
     (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
     (guide-key-mode 1)))

   (defun guide-key/my-hook-function-for-org-mode ()
     (guide-key/add-local-guide-key-sequence "C-c")
     (guide-key/add-local-guide-key-sequence "C-c C-x")
     (guide-key/add-local-highlight-command-regexp "org-"))
   (add-hook 'org-mode-hook 'guide-key/my-hook-function-for-org-mode)

   ;; Move to beginning of line.
   ;; Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/
   (defun my/smarter-move-beginning-of-line (arg)
   "Move point back to indentation of beginning of line.

   Move point to the first non-whitespace character on this line.
   If point is already there, move to the beginning of the line.
   Effectively toggle between the first non-whitespace character and
   the beginning of the line.

   If ARG is not nil or 1, move forward ARG - 1 lines first.  If
   point reaches the beginning or end of the buffer, stop there."
    (interactive "^p")
    (setq arg (or arg 1))

    ;; Move lines first
    (when (/= arg 1)
      (let ((line-move-visual nil))
        (forward-line (1- arg))))

    (let ((orig-point (point)))
      (back-to-indentation)
      (when (= orig-point (point))
        (move-beginning-of-line 1))))

    ;; remap C-a to `smarter-move-beginning-of-line'
    (global-set-key [remap move-beginning-of-line]
                    'my/smarter-move-beginning-of-line)

    ;; set shell to zsh
    (setq explicit-shell-file-name "/bin/zsh")

    ;; control backups
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

    ;; always how paren highlights
    (show-paren-mode 1)

    ;; icons
    (use-package all-the-icons)

    ;; javascript indents
    (setq js-indent-level 2)
   #+end_src

   #+RESULTS:
   : 2

* iBuffer-mode

   #+Begin_SRC emacs-lisp :tangle yes
   (global-set-key (kbd "C-x C-b") 'ibuffer)
      (autoload 'ibuffer "ibuffer" "List buffers." t)

   (setq ibuffer-saved-filter-groups
     (quote (("default"
            ("RJ2" (filename . "/code/rejoiner/"))
            ("TIP" (filename . "/code/tip/"))
            ("Python"
                (mode . python-mode))
            ("HTML"
                (mode . web-mode))
            ("JS"
                (mode . js-mode))
            ("Org" ;; all org-related buffers
                 (mode . org-mode))
            ("Lisp"
                (mode . emacs-lisp-mode)
                )))))

   ;; don't show empty groups
   (setq ibuffer-show-empty-filter-groups nil)

   (add-hook 'ibuffer-mode-hook
     (lambda ()
       (ibuffer-switch-to-saved-filter-groups "default")))

   ;; Add full path to buffer title
   (setq frame-title-format
      (list (format "%s %%S: %%j " (system-name))
        '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

* Reverting buffers
   Very useful if dealing with git repos and also files that can change from Dropbox

   #+BEGIN_SRC emacs-lisp :tangle yes
   (global-auto-revert-mode t)
   #+end_src

* Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp :tangle yes
   (save-place-mode +1)
   (setq-default save-place t)
   #+end_src

* Remember recent files

   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq recentf-save-file (concat user-emacs-directory "recentf")
         recentf-max-saved-items 200
         recentf-max-menu-items 15)
   (recentf-mode t)
   #+end_src

* Python
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell
     :ensure t)
   #+end_src

   Configure the LSP server and UI
   Taken from https://github.com/xhcoding/ms-python

   #+BEGIN_SRC emacs-lisp
   (require 'pyenv-mode-auto)

   (use-package projectile
     :ensure t)

   (defun pyenv-activate-current-project ()
     "Automatically activates pyenv version if .python-version file exists."
     (interactive)
     (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
     (if python-version-directory
        (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
               (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
          (pyenv-mode-set pyenv-current-version)
          (message (concat "Setting virtualenv to " pyenv-current-version))))))

   (defvar pyenv-current-version nil nil)

   (defun pyenv-init()
   "Initialize pyenv's current version to the global one."
   (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
    (message (concat "Setting pyenv version to " global-pyenv))
    (pyenv-mode-set global-pyenv)
    (setq pyenv-current-version global-pyenv)))

   (add-hook 'after-init-hook 'pyenv-init)

   (use-package pyenv-mode
     :init
     (add-to-list 'exec-path "~/.pyenv/shims")
     (setenv "WORKON_HOME" "~/.pyenv/versions/")
     :config
     (pyenv-mode)
     :bind
     ("C-c p" . pyenv-activate-current-project))

   (use-package lsp-python-ms
     :demand
     :load-path "~/code/lsp-python-ms"
     :ensure nil
     :hook (python-mode . lsp)
     :config
     ;; for dev build of language server
     (setq lsp-python-ms-dir
        (expand-file-name "~/code/python-language-server/output/bin/Release/"))
     ;; for executable of language server
     (setq lsp-python-ms-executable
        "~/code/python-language-server/output/bin/Release/linux-x64/publish/Microsoft.Python.LanguageServer"))

   (provide 'init-python)

   (use-package lsp-mode
     :ensure t
     :commands lsp
     :hook
     (python-mode . lsp))

   (use-package lsp-ui
     :ensure t
     :commands lsp-ui-mode
     :custom
       (lsp-ui-doc-enable nil)
       (lsp-ui-doc-position 'at-point)
       (lsp-ui-doc-use-childframe t)
       (lsp-ui-doc-use-webkit t)
       (lsp-ui-sideline-enable nil)
       ;; lsp-ui-imenu
       (lsp-ui-imenu-enable t)
       (lsp-ui-imenu-kind-position 'top) ;; top, bottom, or at-point
     :bind
       (:map lsp-mode-map
       ("C-c C-r" . lsp-ui-peek-find-references)
       ("C-c C-j" . lsp-ui-peek-find-definitions)
       ("C-c i"   . lsp-ui-peek-find-implementation)
       ("C-c m"   . lsp-ui-imenu)
       ("C-c s"   . lsp-ui-sideline-mode)
       ("C-c d"   . ladicle/toggle-lsp-ui-doc)))

   (provide 'init-lsp-mode)

   (use-package company
     :ensure t
     :config
     (setq company-minimum-prefix-length 1
       company-idle-delay 0
       company-tooltip-limit 10
       company-transformers nil
       company-show-numbers t)
     (global-company-mode +1))

   (use-package company-lsp
     :ensure t
     :after company
     :init (add-to-list 'company-backends 'company-lsp))

   (defun lsp-set-cfg ()
     (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
        (lsp--set-configuration lsp-cfg)))
   (add-hook 'lsp-after-initialize-hook 'lsp-set-cfg)

   #+end_src

   #+RESULTS:

* JSON

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package json-mode
     :defer t)
   #+end_src

* Markdown

   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package markdown-mode
     :commands (markdown-mode gfm-mode)
     :mode ("\\.md\\'"
            "\\.mkd\\'"
            "\\.markdown\\'")
     :init
     (setq mardown-command "multimarkdown"))
   #+end_src

* Org-mode

   This will be a expanding collection of org customization.  I live in text
   files throughout my days and orgmode gives me a nice interface for collecting
   notes.

   Using org from the git repo to stay up to date with fixes
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'load-path "~/code/org-mode/contrib/lisp" t)

   (setq org-modules '(org-drill
                      org-info
                      org-panel
                      org-toc))
   (eval-after-load 'org
     '(org-load-modules-maybe t))
   #+end_src
** Estimates
   I need to track time for clients and projects.  This nudges me when I clock in
   to make sure I have an estimate set.

   #+BEGIN_SRC emacs-lisp
   (defun gn/org-mode-ask-effort ()
     "Ask for an effort estimate when clocking in."
     (unless (org-entry-get (point) "Effort")
       (let ((effort
              (completing-read
               "Effort: "
               (org-entry-get-multivalued-property (point) "Effort"))))
       (unless (equal effort "")
         (org-set-property "Effort" effort)))))

   (add-hook 'org-clock-in-prepare-hook
     'gn/org-mode-ask-effort)

   ;; Remove empty LOGBOOK drawers on clock out
   (defun gn/remove-empty-drawer-on-clock-out ()
     (interactive)
     (save-excursion
     (beginning-of-line 0)
     (org-remove-empty-drawer-at "LOGBOOK" (point))))

   (add-hook 'org-clock-out-hook 'gn/remove-empty-drawer-on-clock-out 'append)
   #+end_src

** Org Babel
   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '(
       (python . t)
       (emacs-lisp . t)
       (js . t)
       (org . t)
       (sass . t)
       (sql . t)
     ))
     ;; Syntax highlight in #+BEGIN_SRC blocks
     (setq org-src-fontify-natively t)
     ;; Don't prompt before running code in org
     (setq org-confirm-babel-evaluate nil)

   #+end_src

** Text files
    I also work on these notes in Notesy on the iphone so I have set txt filesto open as org.

   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
   #+end_src
** Misc Org settings
   Org-mode is ugly with all the leading stars.  I'm going to turn those off
   and use org-bullets for a much cleaner presentation.
   #+BEGIN_SRC emacs-lisp
     (setq org-hide-leading-stars t)

     ;; Org bullets for prettier org files
     (use-package org-bullets
     :commands org-bullets-mode
     :init
     (add-hook 'org-mode-hook 'org-bullets-mode)
     (setq org-bullets-bullet-list '("◉" "○" "●" "►" "•")))

     ;; respects splits
     (setq org-agenda-window-setup 'current-window)

     ;; Keywords
     (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

     ; Fast todo selection allows changing from any task todo state to any
     ; other state directly by selecting the appropriate key from the fast
     ; todo selection key menu. This is a great feature!
     (setq org-use-fast-todo-selection t)
     ; allows changing todo states with S-left and S-right skipping all of
     ; the normal processing when entering or leaving a todo state. This
     ; cycles through the todo states but skips setting timestamps and
     ; entering notes which is very convenient when all you want to do is
     ; fix up the status of an entry.
     (setq org-treat-S-cursor-todo-selection-as-state-change nil)

     (setq org-log-done 'time)
     (setq org-log-redeadline 'time)
     (setq org-log-reschedule 'time)
   #+end_src

   #+RESULTS:
   : time

   I have a few triggers that automatically assign tags to tasks based on state changes. If a task moves to CANCELLED state then it gets a CANCELLED tag. Moving a CANCELLED task back to TODO removes the CANCELLED tag. These are used for filtering tasks in agenda views which I'll talk about later.

   The triggers break down to the following rules:

   Moving a task to CANCELLED adds a CANCELLED tag
   Moving a task to WAITING adds a WAITING tag
   Moving a task to HOLD adds WAITING and HOLD tags
   Moving a task to a done state removes WAITING and HOLD tags
   Moving a task to TODO removes WAITING, CANCELLED, and HOLD tags
   Moving a task to NEXT removes WAITING, CANCELLED, and HOLD tags
   Moving a task to DONE removes WAITING, CANCELLED, and HOLD tags
   The tags are used to filter tasks in the agenda views conveniently.

   Attribution: [[http://doc.norang.ca/org-mode.html][http://doc.norang.ca/org-mode.html]]

   #+BEGIN_SRC emacs-lisp
     (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

     (setq org-tag-alist '((:startgroup)
                           ("client" . ?c)
                           ("home" . ?h)
                           ("studio" . ?s)
                           ("guitar" . ?g)
                           ("finance" . ?f)
                           ("agenda" . ?a)
                           ("errands" . ?e)
                           ("learning" . ?l)
                           (:endgroup)
                           ("PROJECT" . ?p)
                           ("phone" . ?t)
                           ("email" . ?m)
                           ("read" . ?r)
                           ("HOLD" . ?H)
                           ("FLAGGED" . ?F)
                           ("WAITING" . ?W)
                           ("watch" . ?w)))

     ;; efforts
     (add-to-list 'org-global-properties
        '("Effort_ALL". "0:05 0:15 0:30 0:45 1:00 2:00 3:00 4:00 6:00 7:00 8:00 9:00 10:00 0:00"))

     ;; agenda files
     (setq org-agenda-files '("~/Dropbox/Org/"))

     ;; agenda
     ;; Start the weekly agenda on Monday
     (setq org-agenda-start-on-weekday 1)

     ;; Display tags farther right
     (setq org-agenda-tags-column -102)

     (setq org-agenda-span 5)
     (setq org-agenda-tags-column -100) ; take advantage of the screen width
     (setq org-agenda-sticky nil)
     (setq org-agenda-inhibit-startup t)
     (setq org-agenda-use-tag-inheritance t)
     (setq org-agenda-show-log t)
     (setq org-agenda-skip-scheduled-if-done t)
     (setq org-agenda-skip-deadline-if-done t)
     (setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
     (setq org-columns-default-format "%14SCHEDULED %Effort{:} %CLOCKSUM_T{:} %1PRIORITY %TODO %50ITEM %TAGS")

     ;; The following lines are always needed.  Choose your own keys.
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
   #+end_src
** Sticky agendas allow you to have more than one agenda view created simultaneously.
   You can quickly switch to the view without incurring an agenda
   rebuild by invoking the agenda custom command key that normally
   generates the agenda. If it already exists it will display the
   existing view. g forces regeneration of the agenda view.  I
   normally have two views displayed (F12 a for the daily/weekly
   agenda and F12 SPC for my project management view)

   #+BEGIN_SRC emacs-lisp
   ;; Use sticky agenda's so they persist
   (setq org-agenda-sticky t)
   #+end_src

** Org-capture
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq org-directory "~/Dropbox/Org")
   (setq org-default-notes-file "~/Dropbox/Org/refile.org")

   ;; I use C-c c to start capture mode
   (global-set-key (kbd "C-c c") 'org-capture)

   ;; Capture templates
   (setq org-capture-templates
       (quote (("t" "todo" entry (file "~/Dropbox/Org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-keep t)
               ("n" "note" entry (file "~/Dropbox/Org/inbox.org")
                "* %? :NOTE:\n%U\n%a\n" :clock-keep t)
               ("j" "Journal" entry (file+datetree "~/Dropbox/Org/journal.org")
               "* %?\n%U\n" :clock-keep t)
               ("m" "Meeting" entry (file "~/Dropbox/Org/inbox.org")
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
               ("p" "Phone call" entry (file "~/Dropbox/Org/inbox.org")
                "* PHONE %? :PHONE:\n%U" :clock-keep t))))

   ;; enable line breaks
   (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))

   ;; Don't allow parent to be marked done unless children are done
   (setq org-enforce-todo-dependencies t)
   (setq org-enforce-todo-checkbox-dependencies t)
   (setq org-fontify-done-headline t)
   (setq org-startup-folded t)
   #+end_src

** Org faces and styling
   Customizing the font sizes due to the theme I'm using making them HUGE
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;(setq org-blank-before-new-entry '((heading . t) (plain-list-item . nil)))
   ;(setq org-insert-heading-respect-content nil)
   ;(setq org-cycle-separator-lines 1)

   (setq org-todo-keyword-faces
      (quote (("TODO" :foreground "olive drab" :weight bold)
              ("NEXT" :foreground "cyan" :weight bold)
              ("DONE" :foreground "dim gray" :weight bold)
              ("WAITING" :foreground "tomato" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "dim gray" :weight bold)
              ("MEETING" :foreground "orange2" :weight bold)
              ("PHONE" :foreground "yellow2" :weight bold))))

    (setq org-fontify-done-headline t)
    (custom-set-faces
       '(org-block-begin-line
         ((t ( :foreground "#eeeeee"   :background "#56595e"))))
       '(org-block
         ((t ( :foreground "#d3d3d3" :background "#303236"))))
       '(org-block-end-line
         ((t ( :foreground "#eeeeee"   :background "#56595e"))))
       '(org-done
         ((t (:foreground "PaleGreen"))))
       '(org-headline-done
         ((t (:foreground "olive drab")))))
   #+end_src

   #+RESULTS:

** Agenda commands
    Pulled some ideas from https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
    Some of these have been yanked from [[http://bnbeckwith.com/bnb-emacs/][bnb-emacs]]

   #+BEGIN_SRC emacs-lisp :tangle yes
   (defun gn/org-skip-subtree-if-priority (priority)
   "Skip an agenda subtree if it has a priority of PRIORITY.

   PRIORITY may be one of the characters ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
        subtree-end
      nil)))

   (defun gn/org-agenda-with-tip (arg)
     (org-agenda-list arg)
     (let ((inhibit-read-only t)
        (pos (point)))
     (goto-char (point-max))
     (goto-char pos)))

   ;; Reset everything to nil
   (setq org-agenda-custom-commands nil)

   (add-to-list 'org-agenda-custom-commands
             '("b" "Agenda" gn/org-agenda-with-tip))

   (add-to-list 'org-agenda-custom-commands
        '("1" "Clients"
             ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))
             (agenda "")
             (tags-todo "client"
               ((org-agenda-skip-function
                '(or (gn/org-skip-subtree-if-priority ?A)
                 (org-agenda-skip-if nil '(scheduled deadline)))))))))

   (add-to-list 'org-agenda-custom-commands
        '("c" "Simple agenda view"
             ((tags "PRIORITY=\"A\""
               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                (org-agenda-overriding-header "HIGH PRIORITY ITEMS")))
             (agenda "")
             (alltodo ""
               ((org-agenda-skip-function
                '(or (gn/org-skip-subtree-if-priority ?A)
                 (org-agenda-skip-if nil '(scheduled deadline)))))))))

   (add-to-list 'org-agenda-custom-commands
             '("2" . "COLLECT...") t)

   (add-to-list 'org-agenda-custom-commands
             '("2b" "CollectBox"
               ((alltodo ""))))

   (add-to-list 'org-agenda-custom-commands
             '("f" . "FOCUS...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rad" "All Tasks (grouped by Due Date)"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE=\"<+1d>\""
                           ((org-agenda-overriding-header "DUE TOMORROW")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+1d>\"+DEADLINE<=\"<+7d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A WEEK")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+7d>\"+DEADLINE<=\"<+28d>\""
                           ((org-agenda-overriding-header "DUE WITHIN A MONTH")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "DEADLINE>\"<+28d>\""
                           ((org-agenda-overriding-header "DUE LATER")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notdeadline))))
                (tags-todo "TODO={WAIT}"
                           ((org-agenda-overriding-header "WAITING FOR")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'deadline))))
                (todo ""
                      ((org-agenda-overriding-header "WAITING FOR")
                       (org-agenda-skip-function
                        '(org-agenda-skip-entry-if 'deadline)))))
               ((org-agenda-sorting-strategy '(priority-down))
                (org-agenda-write-buffer-name "All Tasks (grouped by Due Date)"))
               "~/Dropbox/Org/all-tasks-by-due-date.pdf") t)

   (add-to-list 'org-agenda-custom-commands
             `("f." "Today"
               ((agenda ""
                        ((org-agenda-entry-types '(:timestamp :sexp))
                         (org-agenda-overriding-header
                          (concat "CALENDAR Today: "
                                  (format-time-string "%a %d" (current-time))))
                         (org-agenda-span 'day)))
                (tags-todo "LEVEL=1+REFILE"
                           ((org-agenda-overriding-header "COLLECTBOX (Unscheduled)")))
                (tags-todo "DEADLINE=\"<+0d>\""
                           ((org-agenda-overriding-header "DUE TODAY")
                            (org-agenda-skip-function
                             '(org-agenda-skip-entry-if 'notedeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")
                            (org-qagenda-skip-function
                             '(org-agenda-skip-entry-if 'notedeadline))
                            (org-agenda-sorting-strategy '(priority-down))))
                (agenda ""
                        ((org-agenda-entry-types '(:scheduled))
                         (org-agenda-overriding-header "SCHEDULED")
                         (org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'todo 'done))
                         (org-agenda-sorting-strategy
                          '(priority-down time-down))
                         (org-agenda-span 'day)
                         (org-agenda-start-on-weekday nil)
                         (org-agenda-time-grid nil)))
                (todo "DONE"
                      ((org-agenda-overriding-header "COMPLETED"))))
               ((org-agenda-format-date "")
                (org-agenda-start-with-clockreport-mode nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("fh" "Hotlist"
               ((tags-todo "DEADLINE<\"<+0d>\""
                           ((org-agenda-overriding-header "OVERDUE")))
                (tags-todo "DEADLINE>=\"<+0d>\"+DEADLINE<=\"<+1w>\""
                           ((org-agenda-overriding-header "DUE IN NEXT 7 DAYS")))
                (tags-todo "DEADLINE=\"\"+FLAGGED|DEADLINE>\"<+1w>\"+FLAGGED"
                           ((org-agenda-overriding-header "FLAGGED"))))
               ((org-agenda-todo-ignore-scheduled 'future)))  t)

   (add-to-list 'org-agenda-custom-commands
             '("r" . "REVIEW...") t)

   (add-to-list 'org-agenda-custom-commands
             '("ra" . "All Tasks...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rt" . "Timesheet...") t)
   ;; Show what happened today.
   (add-to-list 'org-agenda-custom-commands
             '("rtd" "Daily Timesheet"
               ((agenda ""))
               ((org-agenda-log-mode-items '(clock closed))
                (org-agenda-overriding-header "DAILY TIMESHEET")
                (org-agenda-show-log 'clockcheck)
                (org-agenda-span 'day)
                (org-agenda-start-with-clockreport-mode t)
                (org-agenda-time-grid nil))) t)

   ;; Show what happened this week.
   (add-to-list 'org-agenda-custom-commands
             '("rtw" "Weekly Timesheet"
               ((agenda ""))
               (
                ;; (org-agenda-format-date "")
                (org-agenda-overriding-header "WEEKLY TIMESHEET")
                (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))
                (org-agenda-span 'week)
                (org-agenda-start-on-weekday 1)
                (org-agenda-start-with-clockreport-mode t)
                (org-agenda-time-grid nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("rc" . "Calendar...") t)

   (add-to-list 'org-agenda-custom-commands
             '("rc7" "Events and appointments for 7 days"
               ((agenda ""))
               ((org-agenda-entry-types '(:timestamp :sexp))
                ;; (org-agenda-overriding-header "Calendar for 7 days")
                (org-agenda-span 'week)
                (org-agenda-format-date "\n%a %d")
                ;; (org-agenda-date-weekend ... new face ...)
                (org-agenda-time-grid nil))) t)

   (add-to-list 'org-agenda-custom-commands
             '("rw" "Weekly review"
               ((tags "CATEGORY={@REFILE}&LEVEL<=2"
                      ((org-agenda-overriding-header "NEW TASKS")))
                (agenda ""
                        ((org-agenda-clockreport-mode t)
                         (org-agenda-format-date
                          (concat "\n"
                                  "%Y-%m-%d" " %a "
                                  (make-string (window-width) ?_)))
                         (org-agenda-overriding-header "PAST WEEK")
                         (org-agenda-prefix-format " %?-11t %i %-12:c% s")
                         (org-agenda-show-log 'clockcheck)
                         (org-agenda-span 7)
                         (org-agenda-start-day "-1w")
                         (org-deadline-warning-days 0)))
                (agenda ""
                        ((org-agenda-overriding-header "NEXT MONTH")
                         (org-agenda-span 'month)
                         (org-agenda-start-day "+0d")
                         (org-deadline-warning-days 0)))
                (todo "PROJECT"
                      ((org-agenda-overriding-header "PROJECT LIST")))
                (todo "DONE|PROJECTDONE"
                      ((org-agenda-overriding-header
                        "Candidates to be archived"))))))

   #+end_src

   Org-Super-Agenda commands

   #+BEGIN_SRC emacs-lisp
   (use-package org-super-agenda
     :ensure t
     :quelpa (org-super-agenda :fetcher github :repo "alphapapa/org-super-agenda")
     :config
     (org-super-agenda-mode t)
     (add-to-list 'org-agenda-custom-commands
               '("rag" "Grouped Tasks"
                 ((todo "" ((org-super-agenda-groups
                             '((:name "All Tasks" :auto-category t)))))))))
   #+end_src

   #+RESULTS:
   : t
** Org Pomodoro
   #+BEGIN_SRC emacs-lisp
    (use-package org-pomodoro
      :after org-agenda
      :custom
        (org-pomodoro-ask-upon-killing t)
        (org-pomodoro-format "%s")  ;;     
        (org-pomodoro-short-break-format "%s")
        (org-pomodoro-long-break-format  "%s")
      :custom-face
        (org-pomodoro-mode-line ((t (:foreground "#ff5555"))))
        (org-pomodoro-mode-line-break   ((t (:foreground "#50fa7b"))))
      :hook
        (org-pomodoro-started . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Let's focus for 25 minutes!")))
        (org-pomodoro-finished . (lambda () (notifications-notify
          :title "org-pomodoro"
          :body "Well done! Take a break.")))

      :bind (:map org-agenda-mode-map
      ("p" . org-pomodoro)))

   ;; enable indent mode
   (setq org-indent-mode t)
   (setq org-fontify-whole-heading-line t)
   (setq org-fontify-done-headline t)
   (setq org-fontify-quote-and-verse-blocks t)

   #+end_src

* Deft
  #+BEGIN_SRC emacs-lisp
  (use-package deft
    :bind ("<f8>" . deft)
    :commands (deft)
    :config
      (setq deft-directory "~/Dropbox/Org"
        deft-extensions '("org" "txt"))
      (setq deft-use-filename-as-title t)
      (setq deft-file-naming-rules
      '((noslash . "_")
        (nospace . "_")
        (case-fn . downcase)))
   )
  #+end_src

* Ivy, Swiper and Counsel
   I went from IDO to Helm and now going for a more minimalist
   lightweight solution in Ivy.

   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish ivy-mode
     :config
     (ivy-mode 1))

   ;(ivy-mode 1)
   ;(setq ivy-use-virtual-buffers t)
   ;(setq ivy-count-format "(%d/%d) ")
   ;; Ivy-based interface to standard commands
   (global-set-key (kbd "C-s") 'swiper)
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   (global-set-key (kbd "<f1> f") 'counsel-describe-function)
   (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   (global-set-key (kbd "<f1> l") 'counsel-find-library)
   (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   ;; Ivy-based interface to shell and system tools
   (global-set-key (kbd "C-c g") 'counsel-git)
   (global-set-key (kbd "C-c j") 'counsel-git-grep)
   (global-set-key (kbd "C-c k") 'counsel-ag)
   (global-set-key (kbd "C-x l") 'counsel-locate)
   (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)

   (use-package ivy-rich
     :ensure t
     :after (ivy)
     :init
     (setq ivy-rich-path-style 'abbrev
        ivy-virtual-abbreviate 'full)
     :config (ivy-rich-mode 1))
   #+end_src

* iMenu
  #+BEGIN_SRC emacs-lisp
  (use-package imenu-anywhere
  :ensure t
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
  #+end_src

* Magit
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-x g") 'magit-status)
   #+end_src

* Terraform
  #+BEGIN_SRC emacs-lisp
  (use-package terraform-mode
    :ensure t
    :mode "\\.tf$"
    :config (setq terraform-indent-level 2)
    :hook
      (terraform-mode . company-mode))
  #+end_src

* Eyebrowse
  For saving window configs because I bounce around from project to
  project and org files a lot it's handy to save configs of windows
  instead of changing them constantly.

  #+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
  :diminish eyebrowse-mode
  :config (progn
    (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
    (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
    (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
    (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
    (eyebrowse-mode t)
    (setq eyebrowse-new-workspace t)))
  #+end_src


  End of configs
