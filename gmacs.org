#+TITLE: Emacs Configuration
#+LANGUAGE:  en
#+AUTHOR: Greg Newman
#+EMAIL: greg@gregnewman.org
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS:   H:3 num:t   toc:3 \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:nil
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+OPTIONS:   author:t creator:t timestamp:t email:t
#+DESCRIPTION: My configs for emacs for daily use with Python and Orgmode
#+KEYWORDS:  org-mode Emacs organization GTD getting-things-done git python javascript react vue css html
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* About
  This is my personal config for Emacs.  It is constructed in literate programming using Org-mode for a documented configuration.

  If you’re viewing the Org file, you can open source code blocks (those are the ones in begin_src) in a separate buffer by moving your point inside them and
  typing ` C-c ’ ` (org-edit-special). This opens another buffer in emacs-lisp-mode, so you can use M-x eval-buffer to load the changes. If you want to explore how
  functions work, use M-x edebug-defun to set up debugging for that function, and then call it.

* Packages
   I use `use-package` and Straight so that all packages are automatically installed if cloning this repo for another machine.

   #+BEGIN_COMMENT emacs-lisp
     ;; Boostrap Straight for package management
     (setq straight-repository-branch "develop") ;; temporary work around for errors compiling https://github.com/radian-software/straight.el/pull/1054
     (defvar bootstrap-version)
     (let ((bootstrap-file
            (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
           (bootstrap-version 6))
       (unless (file-exists-p bootstrap-file)
         (with-current-buffer
             (url-retrieve-synchronously
              "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
              'silent 'inhibit-cookies)
           (goto-char (point-max))
           (eval-print-last-sexp)))
       (load bootstrap-file nil 'nomessage))

     (straight-use-package 'org)

     (straight-use-package 'use-package)
     (setq straight-use-package-by-default t)

     ;; Disable package.el in favor of straight.el
     (setq package-enable-at-startup nil)

     ;; Install use-package
     (straight-use-package 'use-package)
   #+END_SRC

   #+RESULTS:

* Theme
   My current configuration uses doom-theme, specifically doom-dracula (everywhere!) and some default settings.

   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
             doom-themes-enable-italic t) ; if nil, italics is universally disabled

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)

       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config)
       (load-theme 'doom-dracula t))
   #+end_src

* Windows Configuration
  Hide things when emacs starts up, namely the tooltips, toolbar and scrollbar.
  Also set `C-z` and `C-x C-z` to nil.  `C-z` minimizes/hides emacs and it's enfuriating when I accidently hit that key combo.

  #+BEGIN_SRC emacs-lisp
    (use-package emacs
      :init
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (tooltip-mode -1)
      :config
      (setq inhibit-splash-screen t)
      :bind (("C-z" . nil)
             ("C-x C-z" . nil)))
  #+end_src

* Font handling
  For a more asthetically pleasing experience I'm changing how I use fonts in emacs.  For buffers related to code I want Fira Code and for writing qin org-mode buffers I want Avenir.  The following functions allow me to change based on the detected modes.

  #+BEGIN_SRC emacs-lisp
    ;; TODO: Add code to change font size based on which monitor I'm using.

    ;; Use variable width font faces in buffer
    (defun my-buffer-face-mode-variable ()
      "Set font to a variable width (proportional) fonts in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Avenir" :height 130 :width semi-condensed))
      (buffer-face-mode))
    ;; Use monospaced font faces in buffer
    (defun my-buffer-face-mode-fixed ()
      "Sets a fixed width (monospace) font in current buffer"
      (interactive)
      (setq buffer-face-mode-face '(:family "Fira Code" :height 120))
      (buffer-face-mode))
    ;; Set default font faces for Info and ERC modes
    (add-hook 'org-mode-hook 'my-buffer-face-mode-variable)
    (add-hook 'python-mode-hook  'my-buffer-face-mode-fixed)
    (add-hook 'rjsx-mode 'my-buffer-face-mode-fixed)

    (use-package emojify
      :hook (after-init . global-emojify-mode))
  #+end_src

* One liners preferences
  Small settings and packages that really don't have a place anywhere else in this document that warrants it's own section heading for each one.
  These are important in how I like my emacs to perform.

  #+BEGIN_SRC emacs-lisp
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-frame-font "Fira Code Medium 13")
    (setq user-full-name "Greg Newman"
          user-mail-address "greg@gregnewman.org")
    (setq-default indent-tabs-mode nil)
    (setq ring-bell-function (lambda ()))
    (setq confirm-kill-emacs 'yes-or-no-p)
    (setq require-final-newline t)
    (setq-default line-spacing 0.20)
    (setq explicit-shell-file-name "/bin/zsh")
    (setq backup-directory-alist `(("." . "~/.saves")))
    (setq backup-by-copying t)
    (setq delete-old-versions t)
    (setq kept-new-versions 10)
    (setq kept-old-versions 10)
    (setq version-control t)
    (global-display-line-numbers-mode)
    (setq-default display-line-numbers-width 3)
    (setq-default display-fill-column-indicator-column 80)
    ;; always show paren highlights
    (show-paren-mode 1)
    ; highlight current line
    (global-hl-line-mode 1)
    ;; javascript indents.  This can probably be removed once I settle on a "good" js config
    (setq js-indent-level 2)
    ; Desktop setup.
    (desktop-save-mode 1)
    (setq desktop-dirname "~/.emacs.d/desktops/")
    (setq desktop-base-file-name (concat ".desktop." (system-name)))
    (setq desktop-path (list desktop-dirname))
    (setq desktop-base-lock-name "lock")
    (setq desktop-load-locked-desktop t)
    ; Very useful if dealing with git repos and also files that can change from Dropbox
    (global-auto-revert-mode t)
    ;; Configure where TAGS are stored
    (setq tags-table-list (list "~/.emacs.d/TAGS"))
   #+end_src

   #+RESULTS:
   | ~/.emacs.d/TAGS |

* Icons, Whitespace, Git Gutter, Dash and Recent files
   #+BEGIN_SRC emacs-lisp
     ;; icons
     (use-package all-the-icons)

     (use-package whitespace
       :init
       (dolist (hook '(prog-mode-hook text-mode-hook))
         (add-hook hook #'whitespace-mode))
         (add-hook 'before-save-hook #'whitespace-cleanup)
       :config
       (setq whitespace-style '(face tabs empty trailing)))

     ;; ;; Git Gutter
     (use-package git-gutter
       :diminish git-gutter-mode
       :config (global-git-gutter-mode)
       :init
       (progn
         (setq git-gutter:separator-sign " "
               git-gutter:lighter " GG"))
       :config
       (progn
         (set-face-foreground 'git-gutter:deleted "#990A1B")
         (set-face-foreground 'git-gutter:modified "#00736F")
         (set-face-foreground 'git-gutter:added "#546E00"))
       :bind (("C-x p" . git-gutter:previous-hunk)
              ("C-x n" . git-gutter:next-hunk)
              ("C-x v =" . git-gutter:popup-hunk)
              ("C-x v r" . git-gutter:revert-hunk)))

     ;; Browse Dash documentation
     (use-package counsel-dash
       :config
       (setq counsel-dash-common-docsets '("Javascript" "Python_3")))

     ;; Recent files
     (setq recentf-save-file (concat user-emacs-directory "recentf")
           recentf-max-saved-items 200
           recentf-max-menu-items 15)
     (recentf-mode t)
   #+end_src

* Saveplace
   Remember my place in files across sessions

   #+BEGIN_SRC emacs-lisp
     (save-place-mode +1)
     (setq-default save-place t)
   #+end_src

* Custom function to move to beginning of line
     Copied from http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/

   #+BEGIN_SRC emacs-lisp
     (defun my/smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

        Move point to the first non-whitespace character on this line.
        If point is already there, move to the beginning of the line.
        Effectively toggle between the first non-whitespace character and
        the beginning of the line.

        If ARG is not nil or 1, move forward ARG - 1 lines first.  If
        point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

       ;; remap C-a to `smarter-move-beginning-of-line'
       (global-set-key [remap move-beginning-of-line]
                       'my/smarter-move-beginning-of-line)
   #+end_src
* Which-key
  I forget bindings for modes I don't use regularly. Which-key provides nice reminders.

  #+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode)
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
      which-key-side-window-max-width 0.33
      which-key-idle-delay 0.5)
    :diminish which-key-mode)

  (provide 'init-which-key)
  #+end_src

* iBuffer
  I use ibuffer a lot for switching between buffers from a list of available open buffers.
  These settings help to organize that list.

   #+Begin_SRC emacs-lisp
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     (autoload 'ibuffer "ibuffer" "List buffers." t)

     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("Python"
                     (mode . python-mode))
                    ;; ("HTML"
                    ;; (mode . web-mode))
                    ;; ("JS"
                    ;; (or (mode . js2-mode)
                    ;;     (filename . ".js")))
                    ("TXT"
                     (mode . text-mode))
                    ("YAML"
                     (filename . "yaml"))
                    ("Org" ;; all org-related buffers
                     (mode . org-mode))
                    ("Lisp"
                     (mode . emacs-lisp-mode))))))

     ;; don't show empty groups
     (setq ibuffer-show-empty-filter-groups nil)

     (add-hook 'ibuffer-mode-hook
               (lambda ()
                 (ibuffer-switch-to-saved-filter-groups "default")))

     ;; Add full path to buffer title
     (setq frame-title-format
           (list (format "%s %%S: %%j " (system-name))
                 '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
   #+end_src

* Hydra
   #+BEGIN_SRC  emacs-lisp
     (use-package hydra)

     (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("g" text-scale-increase "in")
       ("l" text-scale-decrease "out"))
   #+end_src

* Path from shell
   When starting emacs gui on Mac OS, the paths are not read from .zshrc
   Using `exec-path-from-shell` fixes this.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))
   #+end_src

* Projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :bind-keymap
       ("C-c p" . projectile-command-map))
   #+end_src
* Pyenv
   #+BEGIN_SRC emacs-lisp
     (use-package pyenv-mode-auto)

     (defun pyenv-activate-current-project ()
       "Automatically activates pyenv version if .python-version file exists."
       (interactive)
       (let ((python-version-directory (locate-dominating-file (buffer-file-name) ".python-version")))
       (if python-version-directory
          (let* ((pyenv-version-path (f-expand ".python-version" python-version-directory))
                 (pyenv-current-version (s-trim (f-read-text pyenv-version-path 'utf-8))))
            (pyenv-mode-set pyenv-current-version)
            (message (concat "Setting virtualenv to " pyenv-current-version))))))

     (defvar pyenv-current-version nil nil)

     (defun pyenv-init()
     "Initialize pyenv's current version to the global one."
     (let ((global-pyenv (replace-regexp-in-string "\n" "" (shell-command-to-string "pyenv global"))))
      (message (concat "Setting pyenv version to " global-pyenv))
      (pyenv-mode-set global-pyenv)
      (setq pyenv-current-version global-pyenv)))

     (add-hook 'after-init-hook 'pyenv-init)

     (use-package pyenv-mode)

     ;; Fixes an issue where pyenv conflicts with org-mode
     (eval-after-load 'pyenv-mode
       '(progn
        (define-key pyenv-mode-map (kbd "C-c C-s") nil)))

     (add-hook 'python-mode-hook #'display-fill-column-indicator-mode)
   #+end_src
